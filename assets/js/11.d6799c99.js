(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{500:function(a,t,d){"use strict";d.r(t);var s=d(30),i=Object(s.a)({},(function(){var a=this,t=a.$createElement,d=a._self._c||t;return d("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[d("p",{attrs:{"data-nodeid":"3145"}},[a._v("前端页面的布局和样式编写是传统技能，但页面样式的实现大多数情况下都无法速成，需要通过不断练习、反复地调试才能熟练掌握，因此有一些同学常常会感到疑惑，比如：")]),a._v(" "),d("ol",{attrs:{"data-nodeid":"3146"}},[d("li",{attrs:{"data-nodeid":"3147"}},[d("p",{attrs:{"data-nodeid":"3148"}},[a._v("一个元素总宽高为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3373"}},[a._v("50px")]),a._v("，要怎么在调整边框大小的时候，不需要重新计算和设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3375"}},[a._v("width/height")]),a._v("呢？")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3149"}},[d("p",{attrs:{"data-nodeid":"3150"}},[a._v("为什么给一些元素设置宽高，但是却不生效？")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3151"}},[d("p",{attrs:{"data-nodeid":"3152"}},[a._v("如何将一个元素固定在页面的某个位置，具体怎么做？")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3153"}},[d("p",{attrs:{"data-nodeid":"3154"}},[a._v("为什么将某个元素"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3380"}},[a._v("z-index")]),a._v("设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3382"}},[a._v("9999999")]),a._v("，但是它依然被其他元素遮挡住了呢？")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3155"}},[d("p",{attrs:{"data-nodeid":"3156"}},[a._v("为什么将某个元素里面的元素设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3385"}},[a._v("float")]),a._v("之后，这个元素的高度就歪了呢？")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3157"}},[d("p",{attrs:{"data-nodeid":"3158"}},[a._v("让一个元素进行垂直和水平居中，有多少种实现方式？")])])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3159"}},[a._v("这些问题产生的根本，是对页面布局规则和常见页面布局方式没掌握透彻。今天我就帮你重新梳理下页面布局的基本规则和布局方式，让以上问题迎刃而解。")]),a._v(" "),d("h3",{attrs:{"data-nodeid":"3160"}},[a._v("页面布局的基本规则")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3161"}},[a._v("我们在调试页面样式的时候，如果你不了解页面布局规则，会经常遇到“这里为什么歪了”“这里为什么又好了”这样的困惑。其实页面的布局不只是“碰运气”似的调整样式，浏览器的页面布局会有一些规则，包括：")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3162"}},[d("li",{attrs:{"data-nodeid":"3163"}},[d("p",{attrs:{"data-nodeid":"3164"}},[a._v("盒模型计算；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3165"}},[d("p",{attrs:{"data-nodeid":"3166"}},[a._v("内联元素与块状元素布局规则；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3167"}},[d("p",{attrs:{"data-nodeid":"3168"}},[a._v("文档流布局；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3169"}},[d("p",{attrs:{"data-nodeid":"3170"}},[a._v("元素堆叠。")])])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3171"}},[a._v("下面我们可以结合问题逐一来看。")]),a._v(" "),d("h4",{attrs:{"data-nodeid":"3172"}},[a._v("盒模型计算")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3173"}},[a._v("问题 1：一个元素总宽高为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3398"}},[a._v("30px")]),a._v("，要怎么在调整边框大小的时候，不需要重新计算和设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3400"}},[a._v("width/height")]),a._v("呢？")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3174"}},[a._v("这个问题涉及浏览器布局中的盒模型计算。什么是盒模型？浏览器对文档进行布局的时候，会将每个元素都表示为这样一个盒子。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3175"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/33/F7/Cgp9HWBwBrWAfuU6AANyH4P_TXw391.png",alt:"Drawing 1.png","data-nodeid":"3405"}})]),a._v(" "),d("p",{attrs:{"data-nodeid":"3176"}},[a._v("这就是 CSS 基础盒模型，也就是我们常说的盒模型。盒模型主要用来描述元素所占空间的内容，它由四个部分组成：")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3177"}},[d("li",{attrs:{"data-nodeid":"3178"}},[d("p",{attrs:{"data-nodeid":"3179"}},[a._v("外边框边界"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3408"}},[a._v("margin")]),a._v("（橙色部分）")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3180"}},[d("p",{attrs:{"data-nodeid":"3181"}},[a._v("边框边界"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3411"}},[a._v("border")]),a._v("（黄色部分）")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3182"}},[d("p",{attrs:{"data-nodeid":"3183"}},[a._v("内边距边界"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3414"}},[a._v("padding")]),a._v("（绿色部分）")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3184"}},[d("p",{attrs:{"data-nodeid":"3185"}},[a._v("内容边界"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3417"}},[a._v("content")]),a._v("（蓝色部分）")])])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3186"}},[a._v("盒模型是根据元素的样式来进行计算的，我们可以通过调整元素的样式来改变盒模型。上图中的盒模型来自下面这个"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3420"}},[a._v("<div>")]),a._v("元素，我们给这个元素设置了"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3422"}},[a._v("margin")]),a._v("、"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3424"}},[a._v("padding")]),a._v("和"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3426"}},[a._v("border")]),a._v("：")]),a._v(" "),d("pre",{staticClass:"lang-plain",attrs:{"data-nodeid":"3187"}},[d("code",{attrs:{"data-language":"plain"}},[a._v('<style>\n  .box-model-sample {\n    margin: 10px;\n    padding: 10px;\n    border: solid 2px #000;\n  }\n</style>\n<div class="box-model-sample">这是一个div</div>\n')])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3188"}},[a._v("在上述代码中，我们通过使用 CSS 样式来控制盒模型的大小和属性。盒模型还常用来控制元素的尺寸、属性（颜色、背景、边框等）和位置，当我们在调试样式的时，比较容易遇到以下这些场景。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3189"}},[d("strong",{attrs:{"data-nodeid":"3439"}},[a._v("1")]),a._v(". 盒模型会发生"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3433"}},[a._v("margin")]),a._v("外边距叠加，叠加后的值会以最大边距为准。比如，我们给两个相邻的"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3435"}},[a._v("<div>")]),a._v("元素分别设置了不同的"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3437"}},[a._v("margin")]),a._v("外边距：")]),a._v(" "),d("pre",{staticClass:"lang-plain",attrs:{"data-nodeid":"3190"}},[d("code",{attrs:{"data-language":"plain"}},[a._v('<style>\n  .box-model-sample {\n    margin: 10px;\n    padding: 10px;\n    border: solid 2px #000;\n  }\n  .large-margin {\n    margin: 20px;\n  }\n</style>\n<div class="box-model-sample">这是一个div</div>\n<div class="box-model-sample">这是另一个div</div>\n<div class="box-model-sample large-margin">这是一个margin大一点的div</div>\n')])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3191"}},[a._v("这段代码在浏览器中运行时，我们可以看到，两个"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3441"}},[a._v("<div>")]),a._v("元素之间发生了"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3443"}},[a._v("margin")]),a._v("外边距叠加，它们被合并成单个边距。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3192"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBsGATe5fAACdV1B5j8s079.png",alt:"Drawing 3.png","data-nodeid":"3447"}})]),a._v(" "),d("p",{attrs:{"data-nodeid":"3193"}},[a._v("如果两个元素的外边距不一样，叠加的值大小是各个边距中的最大值，比如上面第二个和第三个矩形之间的外边距值，使用的是第三个边框的外边距值 20 px。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3194"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBseATZypAACnWIPJ5fU407.png",alt:"Drawing 5.png","data-nodeid":"3451"}}),d("br"),a._v("\n需要注意的是，并不是所有情况下都会发生外边距叠加，比如行内框、浮动框或绝对定位框之间的外边距不会叠加。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3195"}},[d("strong",{attrs:{"data-nodeid":"3462"}},[a._v("2")]),a._v(". 盒模型计算效果有多种，比如元素宽高是否包括了边框。我们可以通过"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3458"}},[a._v("box-sizing")]),a._v("属性进行设置盒模型的计算方式，正常的盒模型默认值是"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3460"}},[a._v("content-box")]),a._v("。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3196"}},[a._v("使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3464"}},[a._v("box-sizing")]),a._v("属性可以解决问题 1（调整元素的边框时，不影响元素的宽高），我们可以将元素的"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3466"}},[a._v("box-sizing")]),a._v("属性设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3468"}},[a._v("border-box")]),a._v("：")]),a._v(" "),d("pre",{staticClass:"lang-js",attrs:{"data-nodeid":"3197"}},[d("code",{attrs:{"data-language":"js"}},[a._v('<style>\n  .box-model-sample {\n    height: 50px;\n    margin: 10px;\n    padding: 5px;\n    border: solid 2px #000;\n  }\n  .border-box {\n    box-sizing: border-box;\n  }\n</style>\n<div class="box-model-sample">这是一个div(content-box)</div>\n<div class="box-model-sample border-box">这是另一个div(border-box)</div>\n')])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3198"}},[a._v("对于默认"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3471"}},[a._v("content-box")]),a._v("的元素来说，元素所占的总宽高为设置的元素宽高("),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3473"}},[a._v("width")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3475"}},[a._v("height")]),a._v(")等于："),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3477"}},[a._v("content + padding + border")]),a._v("，因此这里该元素总高度为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3479"}},[a._v("50 + 5 * 2 + 2 * 2 = 64px")]),a._v("。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3199"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBtmAHIF5AAC8NdjpmFw307.png",alt:"Drawing 7.png","data-nodeid":"3483"}})]),a._v(" "),d("p",{attrs:{"data-nodeid":"3200"}},[a._v("当我们设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3485"}},[a._v("border-box")]),a._v("之后，元素所占的总宽高为设置的元素宽高("),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3487"}},[a._v("width")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3489"}},[a._v("height")]),a._v(")，因此，此时高度为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3491"}},[a._v("50px")]),a._v("：")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3201"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBuCAPnYtAADeCHGecrY299.png",alt:"Drawing 9.png","data-nodeid":"3495"}})]),a._v(" "),d("p",{attrs:{"data-nodeid":"3202"}},[a._v("也就是说，如果我们在调整元素边框的时候，不影响元素的宽高，可以给元素的"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3497"}},[a._v("box-sizing")]),a._v("属性设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3499"}},[a._v("border-box")]),a._v("，这便是问题 1 的答案。通过这种方式，我们可以精确地控制元素的空间占位，同时还能灵活地调整元素边框和内边距。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3203"}},[a._v("虽然我们可以通过盒模型设置元素的占位情况，但是有些时候我们给元素设置宽高却不生效（见问题 2），这是因为元素本身的性质也做了区分，我们来看一下。")]),a._v(" "),d("h4",{attrs:{"data-nodeid":"3204"}},[a._v("内联元素与块状元素")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3205"}},[a._v("在浏览器中，元素可分为内联元素和块状元素。比如，"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3504"}},[a._v("<a>")]),a._v("元素为内联元素，"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3506"}},[a._v("<div>")]),a._v("元素为块状元素，我们分别给它们设置宽高：")]),a._v(" "),d("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"3206"}},[d("code",{attrs:{"data-language":"java"}},[a._v("<style>\n  a,\n  div {\n    width: 100px;\n    height: 20px;\n  }\n</style>\n<a>a-123</a><a>a-456</a><a>a-789</a>\n<div>div-123</div>\n<div>div-456</div>\n<div>div-789</div>\n")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3207"}},[a._v("在浏览器中的效果如下图所示：")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3208"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB1OAfXNsAAFw2Bp-aVw496.png",alt:"Drawing 10.png","data-nodeid":"3511"}})]),a._v(" "),d("p",{attrs:{"data-nodeid":"3209"}},[a._v("可以看到，"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3513"}},[a._v("<a>")]),a._v("元素和"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3515"}},[a._v("<div>")]),a._v("元素最主要的区别在于：")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3210"}},[d("li",{attrs:{"data-nodeid":"3211"}},[d("p",{attrs:{"data-nodeid":"3212"}},[d("code",{attrs:{"data-backticks":"1","data-nodeid":"3517"}},[a._v("<a>")]),a._v("元素（内联元素）可以和其他内联元素位于同一行，且宽高设置无效；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3213"}},[d("p",{attrs:{"data-nodeid":"3214"}},[d("code",{attrs:{"data-backticks":"1","data-nodeid":"3519"}},[a._v("<div>")]),a._v("元素（块状元素）不可和其他元素位于同一行，且宽高设置有效。")])])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3215"}},[a._v("所以问题 2 的答案是，当我们给某个元素设置宽高不生效，是因为该元素为内联元素。那么有没有办法解决这个问题呢？")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3216"}},[a._v("我们可以通过设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3523"}},[a._v("display")]),a._v("的值来对元素进行调整。")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3217"}},[d("li",{attrs:{"data-nodeid":"3218"}},[d("p",{attrs:{"data-nodeid":"3219"}},[a._v("设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3526"}},[a._v("block")]),a._v("块状元素，此时可以设置宽度"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3528"}},[a._v("width")]),a._v("和高度"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3530"}},[a._v("height")]),a._v("。")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3220"}},[d("p",{attrs:{"data-nodeid":"3221"}},[a._v("设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3533"}},[a._v("inline")]),a._v("内联元素，此时宽度高度不起作用。")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3222"}},[d("p",{attrs:{"data-nodeid":"3223"}},[a._v("设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3536"}},[a._v("inline-block")]),a._v("，可以理解为块状元素和内联元素的结合，布局规则包括：")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3224"}},[d("li",{attrs:{"data-nodeid":"3225"}},[d("p",{attrs:{"data-nodeid":"3226"}},[a._v("位于块状元素或者其他内联元素内；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3227"}},[d("p",{attrs:{"data-nodeid":"3228"}},[a._v("可容纳其他块状元素或内联元素；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3229"}},[d("p",{attrs:{"data-nodeid":"3230"}},[a._v("宽度高度起作用。")])])])])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3231"}},[a._v("除了内联元素和块状元素，我们还可以将元素设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3542"}},[a._v("inline-block")]),a._v("，"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3544"}},[a._v("inline-block")]),a._v("可以很方便解决一些问题：使元素居中、给"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3546"}},[a._v("inline")]),a._v("元素（"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3548"}},[a._v("<a>")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3550"}},[a._v("<span>")]),a._v("）设置宽高、将多个块状元素放在一行等。")]),a._v(" "),d("h4",{attrs:{"data-nodeid":"3232"}},[a._v("文档流和元素定位")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3233"}},[a._v("接下来，我们来看问题 3：将一个元素固定在页面的某个位置，可以怎么做？这个问题涉及文档流的布局和元素定位的样式设置。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3234"}},[a._v("什么是文档流呢？正常的文档流在 HTML 里面为从上到下，从左到右的排版布局。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3235"}},[a._v("文档流布局方式可以使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3556"}},[a._v("position")]),a._v("样式进行调整，包括："),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3558"}},[a._v("static")]),a._v("（默认值）、"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3560"}},[a._v("inherit")]),a._v("（继承父元素）、"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3562"}},[a._v("relative")]),a._v("（相对定位）、"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3564"}},[a._v("absolute")]),a._v("（相对非"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3566"}},[a._v("static")]),a._v("父元素绝对定位）、"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3568"}},[a._v("fixed")]),a._v("（相对浏览器窗口进行绝对定位）。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3236"}},[a._v("我们来分别看下这些"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3571"}},[a._v("position")]),a._v("样式设置效果。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3237"}},[d("strong",{attrs:{"data-nodeid":"3597"}},[a._v("1")]),a._v(". 元素"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3577"}},[a._v("position")]),a._v("样式属性值为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3579"}},[a._v("static")]),a._v("(默认值)时，元素会忽略"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3581"}},[a._v("top")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3583"}},[a._v("bottom")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3585"}},[a._v("left")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3587"}},[a._v("right")]),a._v("或者"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3589"}},[a._v("z-index")]),a._v("声明，比如我们给部分元素设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3591"}},[a._v("position: static")]),a._v("的样式以及"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3593"}},[a._v("left")]),a._v("和"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3595"}},[a._v("top")]),a._v("定位 ：")]),a._v(" "),d("pre",{staticClass:"lang-css",attrs:{"data-nodeid":"3238"}},[d("code",{attrs:{"data-language":"css"}},[d("span",{staticClass:"hljs-selector-tag"},[a._v("a")]),a._v(", "),d("span",{staticClass:"hljs-selector-tag"},[a._v("p")]),a._v(", "),d("span",{staticClass:"hljs-selector-tag"},[a._v("div")]),a._v(" {\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("border")]),a._v(": solid "),d("span",{staticClass:"hljs-number"},[a._v("1px")]),a._v(" red;\n}\n"),d("span",{staticClass:"hljs-selector-class"},[a._v(".static")]),a._v(" {\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("position")]),a._v(": static;\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("left")]),a._v(": "),d("span",{staticClass:"hljs-number"},[a._v("100px")]),a._v(";\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("top")]),a._v(": "),d("span",{staticClass:"hljs-number"},[a._v("100px")]),a._v(";\n}\n")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3239"}},[a._v("在"),d("a",{attrs:{href:"https://about-position-1255459943.file.myqcloud.com/position-static.html?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"3601"}},[a._v("浏览器")]),a._v("中，我们可以看到给"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3603"}},[a._v("position: static")]),a._v("的元素添加定位"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3605"}},[a._v("left: 100px; top: 100px;")]),a._v("是无效的。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3240"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB2yAK13GAAEoSLhXiR0106.png",alt:"Drawing 12.png","data-nodeid":"3609"}})]),a._v(" "),d("div",{attrs:{"data-nodeid":"3241"}},[d("p",{staticStyle:{"text-align":"center"}},[a._v("（static 元素的定位设置无效果）")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3242"}},[d("strong",{attrs:{"data-nodeid":"3624"}},[a._v("2")]),a._v(". 元素"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3614"}},[a._v("position")]),a._v("样式属性值为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3616"}},[a._v("relative")]),a._v("时，元素会保持原有文档流，但相对本身的原始位置发生位移，且会占用空间，比如我们给部分元素设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3618"}},[a._v("position: relative")]),a._v("样式以及"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3620"}},[a._v("left")]),a._v("和"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3622"}},[a._v("top")]),a._v("定位：")]),a._v(" "),d("pre",{staticClass:"lang-css",attrs:{"data-nodeid":"3243"}},[d("code",{attrs:{"data-language":"css"}},[d("span",{staticClass:"hljs-selector-tag"},[a._v("a")]),a._v(", "),d("span",{staticClass:"hljs-selector-tag"},[a._v("p")]),a._v(", "),d("span",{staticClass:"hljs-selector-tag"},[a._v("div")]),a._v(" {\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("border")]),a._v(": solid "),d("span",{staticClass:"hljs-number"},[a._v("1px")]),a._v(" red;\n}\n"),d("span",{staticClass:"hljs-selector-class"},[a._v(".relative")]),a._v(" {\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("position")]),a._v(": relative;\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("left")]),a._v(": "),d("span",{staticClass:"hljs-number"},[a._v("100px")]),a._v(";\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("top")]),a._v(": "),d("span",{staticClass:"hljs-number"},[a._v("100px")]),a._v(";\n}\n")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3244"}},[a._v("在"),d("a",{attrs:{href:"https://about-position-1255459943.file.myqcloud.com/position-relative.html?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"3628"}},[a._v("浏览器")]),a._v("中，我们可以看到"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3630"}},[a._v("position: relative")]),a._v("的元素相对于其正常位置进行定位，元素占有原本位置（文档流中占有的位置与其原本位置相同），因此下一个元素会排到该元素后方。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3245"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB3mAFFqSAADs-8Jl61g905.png",alt:"Drawing 14.png","data-nodeid":"3634"}})]),a._v(" "),d("div",{attrs:{"data-nodeid":"3246"}},[d("p",{staticStyle:{"text-align":"center"}},[a._v("(relative 定位的元素，定位设置可生效)")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3247"}},[a._v("这里有个需要注意的地方：虽然"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3636"}},[a._v("relative")]),a._v("元素占位与"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3638"}},[a._v("static")]),a._v("相同，但会溢出父元素，撑开整个页面。如下图所示，我们能看到"),d("a",{attrs:{href:"https://about-position-1255459943.file.myqcloud.com/position-relative-occupation.html?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"3642"}},[a._v("浏览器中")]),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3643"}},[a._v("relative")]),a._v("元素撑开父元素看到页面底部有滚动条。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3248"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB5-ANcUmAAC64A1Pkhk727.png",alt:"Drawing 16.png","data-nodeid":"3647"}})]),a._v(" "),d("div",{attrs:{"data-nodeid":"3249"}},[d("p",{staticStyle:{"text-align":"center"}},[a._v("(relative 定位的元素，可撑开父元素)")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3250"}},[a._v("此时给父元素设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3649"}},[a._v("overflow: hidden;")]),a._v("则可以隐藏溢出部分。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3251"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/33/F8/Cgp9HWBwB6iARwZZAABrqdhMZGc561.png",alt:"Drawing 18.png","data-nodeid":"3653"}})]),a._v(" "),d("p",{attrs:{"data-nodeid":"3252"}},[a._v("（通过设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3655"}},[a._v("overflow: hidden")]),a._v("可隐藏溢出部分元素）")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3253"}},[d("strong",{attrs:{"data-nodeid":"3679"}},[a._v("3")]),a._v(". 元素"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3661"}},[a._v("position")]),a._v("样式属性值为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3663"}},[a._v("absolute")]),a._v("、且设置了定位（"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3665"}},[a._v("top")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3667"}},[a._v("bottom")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3669"}},[a._v("left")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3671"}},[a._v("right")]),a._v("）时，元素会脱离文档流，相对于其包含块来定位，且不占位，比如我们给"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3673"}},[a._v("position: absolute")]),a._v("的元素设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3675"}},[a._v("left")]),a._v("和"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3677"}},[a._v("top")]),a._v("定位 ：")]),a._v(" "),d("pre",{staticClass:"lang-css",attrs:{"data-nodeid":"3254"}},[d("code",{attrs:{"data-language":"css"}},[d("span",{staticClass:"hljs-selector-class"},[a._v(".parent")]),a._v(" {\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("border")]),a._v(": solid "),d("span",{staticClass:"hljs-number"},[a._v("1px")]),a._v(" blue;\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("width")]),a._v(": "),d("span",{staticClass:"hljs-number"},[a._v("300px")]),a._v(";\n}\n"),d("span",{staticClass:"hljs-selector-class"},[a._v(".parent")]),a._v(" > "),d("span",{staticClass:"hljs-selector-tag"},[a._v("div")]),a._v(" {\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("border")]),a._v(": solid "),d("span",{staticClass:"hljs-number"},[a._v("1px")]),a._v(" red;\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("height")]),a._v(": "),d("span",{staticClass:"hljs-number"},[a._v("100px")]),a._v(";\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("width")]),a._v(": "),d("span",{staticClass:"hljs-number"},[a._v("300px")]),a._v(";\n}\n"),d("span",{staticClass:"hljs-selector-class"},[a._v(".absolute")]),a._v(" {\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("position")]),a._v(": absolute;\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("left")]),a._v(": "),d("span",{staticClass:"hljs-number"},[a._v("100px")]),a._v(";\n  "),d("span",{staticClass:"hljs-attribute"},[a._v("height")]),a._v(": "),d("span",{staticClass:"hljs-number"},[a._v("100px")]),a._v(";\n}\n")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3255"}},[a._v("在"),d("a",{attrs:{href:"https://about-position-1255459943.file.myqcloud.com/position-absolute.html?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"3683"}},[a._v("浏览器")]),a._v("中，我们可以看到"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3685"}},[a._v("position: absolute")]),a._v("的元素不占位，因此下一个符合普通流的元素会略过"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3687"}},[a._v("absolute")]),a._v("元素排到其上一个元素的后方。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3256"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB7KARvTaAABaLe2qI4k309.png",alt:"Drawing 20.png","data-nodeid":"3691"}})]),a._v(" "),d("div",{attrs:{"data-nodeid":"3257"}},[d("p",{staticStyle:{"text-align":"center"}},[a._v("（absolute 元素不占位）")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3258"}},[d("strong",{attrs:{"data-nodeid":"3708"}},[a._v("4")]),a._v(". 元素"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3696"}},[a._v("position")]),a._v("样式属性值为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3698"}},[a._v("fixed")]),a._v("时，元素脱离文档流、且不占位，此时看上去与"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3700"}},[a._v("absolute")]),a._v("相似。但当我们进行"),d("a",{attrs:{href:"https://about-position-1255459943.file.myqcloud.com/position-fixed-absolute.html?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"3704"}},[a._v("页面")]),a._v("滚动的时候，会发现"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3706"}},[a._v("fixed")]),a._v("元素位置没有发生变化。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3259"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB7uAbshiAADWWsHZghM208.png",alt:"Drawing 22.png","data-nodeid":"3711"}})]),a._v(" "),d("div",{attrs:{"data-nodeid":"3260"}},[d("p",{staticStyle:{"text-align":"center"}},[a._v("（fixed 元素同样不占位）")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3261"}},[a._v("这是因为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3713"}},[a._v("fixed")]),a._v("元素相对于浏览器窗口进行定位，而"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3715"}},[a._v("absolute")]),a._v("元素只有在满足“无"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3717"}},[a._v("static")]),a._v("定位以外的父元素”的时候，才会相对于"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3719"}},[a._v("document")]),a._v("进行定位。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3262"}},[a._v("回到问题 3，将一个元素固定在页面的某个位置，可以通过给元素或是其父类元素添加"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3722"}},[a._v("position: fixed")]),a._v("或者"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3724"}},[a._v("position: absolute")]),a._v("将其固定在浏览器窗口或是文档页面中。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3263"}},[a._v("使用元素定位可以将某个元素固定，那么同一个位置中存在多个元素的时候，就会发生元素的堆叠。")]),a._v(" "),d("h4",{attrs:{"data-nodeid":"3264"}},[a._v("元素堆叠 z-index")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3265"}},[a._v("元素的堆叠方式和顺序，除了与"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3729"}},[a._v("position")]),a._v("定位有关，也与"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3731"}},[a._v("z-index")]),a._v("有关。通过设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3733"}},[a._v("z-index")]),a._v("值，我们可以设置元素的堆叠顺序，比如我们给同级的元素添加"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3735"}},[a._v("z-index值")]),a._v("：")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3266"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/33/F8/Cgp9HWBwB9GAVImUAAC4RJoX2o8350.png",alt:"Drawing 24.png","data-nodeid":"3739"}})]),a._v(" "),d("div",{attrs:{"data-nodeid":"3267"}},[d("p",{staticStyle:{"text-align":"center"}},[a._v("（z-index 可改变元素堆叠顺序）")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3268"}},[a._v("在"),d("a",{attrs:{href:"https://about-position-1255459943.file.myqcloud.com/position-z-index-same-level.html?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"3743"}},[a._v("浏览器")]),a._v("中，我们可以看到：")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3269"}},[d("li",{attrs:{"data-nodeid":"3270"}},[d("p",{attrs:{"data-nodeid":"3271"}},[a._v("当同级元素不设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3746"}},[a._v("z-index")]),a._v("或者"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3748"}},[a._v("z-index")]),a._v("相等时，后面的元素会叠在前面的元素上方；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3272"}},[d("p",{attrs:{"data-nodeid":"3273"}},[a._v("当同级元素"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3751"}},[a._v("z-index")]),a._v("不同时，"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3753"}},[a._v("z-index")]),a._v("大的元素会叠在"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3755"}},[a._v("z-index")]),a._v("小的元素上方。")])])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3274"}},[d("code",{attrs:{"data-backticks":"1","data-nodeid":"3757"}},[a._v("z-index")]),a._v("样式属性比较常用于多个元素层级控制的时候，比如弹窗一般需要在最上层，就可以通过设置较大的"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3759"}},[a._v("z-index")]),a._v("值来控制。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3275"}},[a._v("那么，我们来看问题 4： 为什么将某个元素"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3762"}},[a._v("z-index")]),a._v("设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3764"}},[a._v("9999999")]),a._v("，但是它依然被其他元素遮挡住了呢？")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3276"}},[a._v("这是因为除了同级元素以外，"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3767"}},[a._v("z-index")]),a._v("值的设置效果还会受到父元素的"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3769"}},[a._v("z-index")]),a._v("值的影响。"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3771"}},[a._v("z-index")]),a._v("值的设置只决定同一父元素中的同级子元素的堆叠顺序。因此，即使将某个元素"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3773"}},[a._v("z-index")]),a._v("设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3775"}},[a._v("9999999")]),a._v("，它依然可能因为父元素的"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3777"}},[a._v("z-index")]),a._v("值小于其他父元素同级的元素，而导致该元素依然被其他元素遮挡。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3277"}},[a._v("现在，我们解答了问题 1~4，同时还学习了关于 CSS 页面布局的核心规则，包括：")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3278"}},[d("li",{attrs:{"data-nodeid":"3279"}},[d("p",{attrs:{"data-nodeid":"3280"}},[a._v("盒模型主要用来描述元素所占空间的内容；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3281"}},[d("p",{attrs:{"data-nodeid":"3282"}},[a._v("一个元素属于内联元素还是块状元素，会影响它是否可以和其他元素位于同一行、宽高设置是否有效；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3283"}},[d("p",{attrs:{"data-nodeid":"3284"}},[a._v("正常的文档流在 HTML 里面为从上到下、从左到右的排版布局，使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3785"}},[a._v("position")]),a._v("属性可以使元素脱离正常的文档流；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3285"}},[d("p",{attrs:{"data-nodeid":"3286"}},[a._v("使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3788"}},[a._v("z-index")]),a._v("属性可以设置元素的堆叠顺序。")])])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3287"}},[a._v("掌握了这些页面布局的规则，可以解决我们日常页面中单个元素样式调整中的大多数问题。对于进行整体的页面布局，比如设置元素居中、排版、区域划分等，涉及多个元素的布局，这种情况下常常会用到 Flex、Grid 这样的页面布局方式。下面我们一起来看看。")]),a._v(" "),d("h3",{attrs:{"data-nodeid":"3288"}},[a._v("常见页面布局方式")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3289"}},[a._v("在我们的日常工作中，实现页面的 UI 样式除了会遇到单个元素的样式调整外，还需要对整个页面进行结构布局，比如将页面划分为左中右、上中下模块，实现某些模块的居中对齐，实现页面的响应式布局，等等。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3290"}},[a._v("要实现对页面的排版布局，需要使用到一些页面布局方式。目前来说，比较常见的布局方式主要有三种：")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3291"}},[d("li",{attrs:{"data-nodeid":"3292"}},[d("p",{attrs:{"data-nodeid":"3293"}},[a._v("传统布局方式；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3294"}},[d("p",{attrs:{"data-nodeid":"3295"}},[a._v("Flex 布局方式；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3296"}},[d("p",{attrs:{"data-nodeid":"3297"}},[a._v("Grid 布局方式。")])])]),a._v(" "),d("h4",{attrs:{"data-nodeid":"3298"}},[a._v("传统布局")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3299"}},[a._v("传统布局方式基本上使用上面介绍的布局规则，结合"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3799"}},[a._v("display")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3801"}},[a._v("position")]),a._v("/"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3803"}},[a._v("float")]),a._v("属性以及一些边距、x/y 轴距离等方式来进行布局。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3300"}},[a._v("除了使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3806"}},[a._v("position: fixed")]),a._v("或者"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3808"}},[a._v("position: absolute")]),a._v("时，会使元素脱离文档流，使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3810"}},[a._v("float")]),a._v("属性同样会导致元素脱离文档流。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3301"}},[a._v("这就涉及问题 5：为什么将某个元素里面的元素设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3813"}},[a._v("float")]),a._v("之后，这个元素的高度就歪了呢？")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3302"}},[a._v("这是因为当我们给元素的"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3816"}},[a._v("float")]),a._v("属性赋值后，元素会脱离文档流，进行左右浮动，比如这里我们将其中一个"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3818"}},[a._v("<div>")]),a._v("元素添加了"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3820"}},[a._v("float")]),a._v("属性 ：")]),a._v(" "),d("pre",{staticClass:"lang-js",attrs:{"data-nodeid":"3303"}},[d("code",{attrs:{"data-language":"js"}},[a._v("<style>\n  div {\n    "),d("span",{staticClass:"hljs-attr"},[a._v("border")]),a._v(": solid "),d("span",{staticClass:"hljs-number"},[a._v("1")]),a._v("px red;\n    width: "),d("span",{staticClass:"hljs-number"},[a._v("50")]),a._v("px;\n    height: "),d("span",{staticClass:"hljs-number"},[a._v("50")]),a._v("px;\n  }\n  .float {\n    "),d("span",{staticClass:"hljs-attr"},[a._v("float")]),a._v(": left;\n  }\n</style>\n"),d("span",{staticClass:"xml"},[d("span",{staticClass:"hljs-tag"},[a._v("<"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(">")]),a._v("1"),d("span",{staticClass:"hljs-tag"},[a._v("</"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(">")])]),a._v("\n"),d("span",{staticClass:"xml"},[d("span",{staticClass:"hljs-tag"},[a._v("<"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(" "),d("span",{staticClass:"hljs-attr"},[a._v("class")]),a._v("="),d("span",{staticClass:"hljs-string"},[a._v('"float"')]),a._v(">")]),a._v("2"),d("span",{staticClass:"hljs-tag"},[a._v("</"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(">")])]),a._v("\n"),d("span",{staticClass:"xml"},[d("span",{staticClass:"hljs-tag"},[a._v("<"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(" "),d("span",{staticClass:"hljs-attr"},[a._v("class")]),a._v("="),d("span",{staticClass:"hljs-string"},[a._v('"float"')]),a._v(">")]),a._v("3"),d("span",{staticClass:"hljs-tag"},[a._v("</"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(">")])]),a._v("\n"),d("span",{staticClass:"xml"},[d("span",{staticClass:"hljs-tag"},[a._v("<"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(">")]),a._v("4"),d("span",{staticClass:"hljs-tag"},[a._v("</"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(">")])]),a._v("\n"),d("span",{staticClass:"xml"},[d("span",{staticClass:"hljs-tag"},[a._v("<"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(">")]),a._v("5"),d("span",{staticClass:"hljs-tag"},[a._v("</"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(">")])]),a._v("\n"),d("span",{staticClass:"xml"},[d("span",{staticClass:"hljs-tag"},[a._v("<"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(" "),d("span",{staticClass:"hljs-attr"},[a._v("class")]),a._v("="),d("span",{staticClass:"hljs-string"},[a._v('"float"')]),a._v(">")]),a._v("6"),d("span",{staticClass:"hljs-tag"},[a._v("</"),d("span",{staticClass:"hljs-name"},[a._v("div")]),a._v(">")])]),a._v("\n")])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3304"}},[a._v("我们可以在"),d("a",{attrs:{href:"https://about-position-1255459943.file.myqcloud.com/display-float.html?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"3825"}},[a._v("浏览器")]),a._v("中看到，"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3827"}},[a._v("float")]),a._v("元素会紧贴着父元素或者是上一个同级同浮动元素的边框：")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3305"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB-SAZahpAABKURkJ8hE997.png",alt:"Drawing 26.png","data-nodeid":"3831"}})]),a._v(" "),d("p",{attrs:{"data-nodeid":"3306"}},[a._v("可以看到当元素设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3833"}},[a._v("float")]),a._v("之后，它就脱离文档流，同时也不再占据原本的空间。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3307"}},[a._v("因此，问题 5 的答案为：本属于普通流中的元素浮动之后，父元素内部如果不存在其他普通流元素了，就会表现出高度为 0，又称为高度塌陷。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3308"}},[a._v("在这样的情况下，我们可以使用以下方法撑开父元素：")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3309"}},[d("li",{attrs:{"data-nodeid":"3310"}},[d("p",{attrs:{"data-nodeid":"3311"}},[a._v("父元素使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3838"}},[a._v("overflow: hidden")]),a._v("（此时高度为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3840"}},[a._v("auto")]),a._v("）；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3312"}},[d("p",{attrs:{"data-nodeid":"3313"}},[a._v("使父元素也成为浮动"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3843"}},[a._v("float")]),a._v("元素；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3314"}},[d("p",{attrs:{"data-nodeid":"3315"}},[a._v("使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3846"}},[a._v("clear")]),a._v("清除浮动。")])])]),a._v(" "),d("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"57081"}},[a._v("除了 "),d("code",{attrs:{"data-backticks":"1","data-nodeid":"57083"}},[a._v("clear")]),a._v(" 清除浮动之外，这些方法为什么可以达到撑开父元素的效果呢，这是因为 BFC（Block Formatting Context，块格式化上下文）的特性。BFC 是 Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域，详情大家可以私下了解下。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3317"}},[a._v("传统方式布局的优势在于兼容性较好，在一些版本较低的浏览器上也能给到用户较友好的体验。但传统布局需要掌握的知识较多也相对复杂，对于整个页面的布局和排版实现，常常是基于盒模型、使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3850"}},[a._v("display")]),a._v("属性+"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3852"}},[a._v("position")]),a._v("属性+"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3854"}},[a._v("float")]),a._v("属性的方式来进行，这个过程比较烦琐，因此更多时候我们都会使用开源库（比如 bootstrap）来完成页面布局。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3318"}},[a._v("后来 W3C 提出了新的布局方式，可以快速、简便地实现页面的排版布局，新的布局方式包括 Flex 布局和 Grid 布局。")]),a._v(" "),d("h4",{attrs:{"data-nodeid":"3319"}},[a._v("使用 Flex 布局")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3320"}},[a._v("Flex 布局（又称为 flexbox）是一种一维的布局模型。在使用此布局时，需掌握几个概念。")]),a._v(" "),d("ol",{attrs:{"data-nodeid":"3321"}},[d("li",{attrs:{"data-nodeid":"3322"}},[d("p",{attrs:{"data-nodeid":"3323"}},[a._v("flexbox 的两根轴线。其中，主轴由"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3860"}},[a._v("flex-direction")]),a._v("定义，交叉轴则垂直于主轴。")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3324"}},[d("p",{attrs:{"data-nodeid":"3325"}},[a._v("在 flexbox 中，使用起始和终止来描述布局方向。")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3326"}},[d("p",{attrs:{"data-nodeid":"3327"}},[a._v("认识 flex 容器和 flex 元素。")])])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3328"}},[a._v("想熟练使用 Flex 布局，我们需要了解什么是 flex 容器和 flex 元素。比如我们给一个父元素"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3865"}},[a._v("div")]),a._v("设置"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3867"}},[a._v("display: flex;")]),a._v("：")]),a._v(" "),d("pre",{staticClass:"lang-js",attrs:{"data-nodeid":"3329"}},[d("code",{attrs:{"data-language":"js"}},[a._v('<style>\n  div {\n    border: solid 1px #000;\n    margin: 10px;\n  }\n  .box {\n    display: flex;\n  }\n</style>\n<div class="box">\n  <div>1</div>\n  <div>2</div>\n  <div>3 <br />有其他 <br />内容</div>\n</div>\n')])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3330"}},[a._v("在浏览器中的效果就会如图所示：")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3331"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/34/01/CioPOWBwB_WAR3CJAAAti6zxREI918.png",alt:"Drawing 28.png","data-nodeid":"3872"}})]),a._v(" "),d("p",{attrs:{"data-nodeid":"3332"}},[a._v("其中，flex 容器为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3874"}},[a._v('<div class="box">')]),a._v("元素及其内部区域，而容器的直系子元素（1、2、3 这 3 个"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3876"}},[a._v("<div>")]),a._v("）为 flex 元素。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3333"}},[a._v("在掌握了 flex 容器和 flex 元素之后，我们就可以通过调整 flexbox 轴线方向、排列方向和对齐方式的方式，实现需要的页面效果。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3334"}},[a._v("Flex 布局种常用的方式包括：")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3335"}},[d("li",{attrs:{"data-nodeid":"3336"}},[d("p",{attrs:{"data-nodeid":"3337"}},[a._v("通过"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3881"}},[a._v("flex-direction")]),a._v("调整 Flex 元素的排列方向（主轴的方向）；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3338"}},[d("p",{attrs:{"data-nodeid":"3339"}},[a._v("用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3884"}},[a._v("flex-wrap")]),a._v("实现多行 Flex 容器如何换行；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3340"}},[d("p",{attrs:{"data-nodeid":"3341"}},[a._v("使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3887"}},[a._v("justify-content")]),a._v("调整 Flex 元素在主轴上的对齐方式；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3342"}},[d("p",{attrs:{"data-nodeid":"3343"}},[a._v("使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3890"}},[a._v("align-items")]),a._v("调整 Flex 元素在交叉轴上如何对齐；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3344"}},[d("p",{attrs:{"data-nodeid":"3345"}},[a._v("使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3893"}},[a._v("align-content")]),a._v("调整多根轴线的对齐方式。")])])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3346"}},[a._v("Flex 布局给"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3896"}},[a._v("flexbox")]),a._v("的子元素之间提供了强大的空间分布和对齐能力，我们可以方便地使用 Flex 布局来实现垂直和水平居中，比如通过将元素设置为"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3898"}},[a._v("display: flex;")]),a._v("，并配合使用"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3900"}},[a._v("align-items: center;")]),a._v("、"),d("code",{attrs:{"data-backticks":"1","data-nodeid":"3902"}},[a._v("justify-content: center;")]),a._v("：")]),a._v(" "),d("pre",{staticClass:"lang-js",attrs:{"data-nodeid":"3347"}},[d("code",{attrs:{"data-language":"js"}},[a._v('<style>\n  div {\n    border: solid 1px #000;\n  }\n  .box {\n    display: flex;\n    width: 200px;\n    height: 200px;\n    align-items: center;\n    justify-content: center;\n  }\n  .in-box {\n    width: 80px;\n    height: 80px;\n  }\n</style>\n<div class="box">\n  <div class="in-box">我想要垂直水平居中</div>\n</div>\n')])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3348"}},[a._v("就可以将一个元素设置为垂直和水平居中：")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3349"}},[d("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/34/01/CioPOWBwCA-Ad4tQAAA-HOY2i2w574.png",alt:"Drawing 30.png","data-nodeid":"3907"}})]),a._v(" "),d("p",{attrs:{"data-nodeid":"3350"}},[a._v("对于传统的布局方式来说，要实现上述垂直水平居中，常常需要依赖绝对定位+元素偏移的方式来实现，该实现方式不够灵活（在调整元素大小时需要调整定位）、难以维护。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3351"}},[a._v("Flex 布局的出现，解决了很多前端开发居中、排版的一些痛点，尤其是垂直居中，因此现在几乎成为主流的布局方式。除此之外，还可以对 Flex 元素设置排列顺序、放大比例、缩小比例等。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3352"}},[a._v("如果说 Flex 布局是一维布局，那么 Grid 布局则是一种二维布局的方式。")]),a._v(" "),d("h4",{attrs:{"data-nodeid":"3353"}},[a._v("Grid 布局")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3354"}},[a._v("Grid 布局又称为网格布局，它将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3355"}},[a._v("我们知道 Flex 布局是基于轴线布局，与之相对，Grid 布局则是将容器划分成行和列，可以像表格一样按行或列来对齐元素。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3356"}},[a._v("对于 Grid 布局，同样需要理解几个概念：网格轨道与行列、网格线、网格容器等。其实 Grid 布局很多概念跟 Flex 布局还挺相似的，因此这里不再赘述。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3357"}},[a._v("使用 Grid 布局可以：")]),a._v(" "),d("ul",{attrs:{"data-nodeid":"3358"}},[d("li",{attrs:{"data-nodeid":"3359"}},[d("p",{attrs:{"data-nodeid":"3360"}},[a._v("实现网页的响应式布局；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3361"}},[d("p",{attrs:{"data-nodeid":"3362"}},[a._v("实现灵活的 12 列布局（类似于 Bootstrap 的 CSS 布局方式）；")])]),a._v(" "),d("li",{attrs:{"data-nodeid":"3363"}},[d("p",{attrs:{"data-nodeid":"3364"}},[a._v("与其他布局方式结合，与 css 其他部分协同合作。")])])]),a._v(" "),d("p",{attrs:{"data-nodeid":"3365"}},[a._v("通过 Grid 布局我们能实现任意组合不同布局，其设计可称得上目前最强大的布局方式，它与 Flex 布局是未来的趋势。其中，Grid 布局适用于较大规模的布局，Flex 布局则适合页面中的组件和较小规模布局。")]),a._v(" "),d("h3",{attrs:{"data-nodeid":"3366"}},[a._v("小结")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3367"}},[a._v("今天我带大家学习了页面布局中比较核心的一些规则，包括盒模型计算、内联元素与块状元素布局规则、文档流布局和元素堆叠顺序。我们在写 CSS 过程中会遇到很多的“神奇”现象，而要理解这些现象并解决问题，掌握这些页面布局的原理逻辑和规则很重要。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3368"}},[a._v("除了页面布局规则之外，我还带大家认识了常见的页面布局方式，包括传统布局方式、FleX 布局和 Grid 布局。")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3369"}},[a._v("细心的你或许也发现了，我们还遗留了问题 6 没有给出具体的答案：让一个元素进行垂直和水平居中，有多少种实现方式？")]),a._v(" "),d("p",{attrs:{"data-nodeid":"3370"}},[a._v("这个问题，我希望你可以自己进行解答，欢迎你将答案写在留言区～")]),a._v(" "),d("hr"),a._v(" "),d("h3",{attrs:{id:"精选评论"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[a._v("#")]),a._v(" 精选评论")]),a._v(" "),d("h5",{attrs:{id:"飞"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#飞"}},[a._v("#")]),a._v(" **飞：")]),a._v(" "),d("blockquote",[d("p",[a._v("方法挺多的，我常用的主要是如下三种1. 知道元素宽高：margin: 0 auto; position: relative; top: 50%; margin-top: -1/2元素高度2. 不知道元素宽高：margin: 0 auto; position:relative; top:50%;transform: translateY(-50%)3. display: flex;align-items:center;justify-content:center;")])]),a._v(" "),d("h6",{attrs:{id:"编辑回复"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#编辑回复"}},[a._v("#")]),a._v("     编辑回复：")]),a._v(" "),d("blockquote",[d("p",[a._v("    赞哦")])]),a._v(" "),d("h5",{attrs:{id:"宇"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#宇"}},[a._v("#")]),a._v(" **宇：")]),a._v(" "),d("blockquote",[d("p",[a._v("传统布局那一块 div4 和 div5重合是为什么呢。。")])]),a._v(" "),d("h6",{attrs:{id:"讲师回复"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),d("blockquote",[d("p",[a._v("    其实你在浏览器中进行观察，就会发现实际上 div4 和 div5 的占位并没有重合，如果你试试给它们加上背景颜色就能看的比较清楚了。之所以看起来它们重合了，是因为浮动元素会对相邻的元素造成影响，其中就包括了文字会尽可能围绕浮动元素。在 div4 上加上 clear: left; 就可以清除 float 带来的影响")])]),a._v(" "),d("h5",{attrs:{id:"change"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#change"}},[a._v("#")]),a._v(" Change：")]),a._v(" "),d("blockquote",[d("p",[a._v("垂直居中的方式：1、通过 inline-block设置元素 height和 line-height 、text-align:center 来进行垂直居中。2、通过 position:absoulte 加偏移量3、通过 flex布局属性 justity-content:center; align-items:center;")])]),a._v(" "),d("h5",{attrs:{id:"聪"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#聪"}},[a._v("#")]),a._v(" *聪：")]),a._v(" "),d("blockquote",[d("p",[a._v("position还有一个可取值：sticky")])]),a._v(" "),d("h6",{attrs:{id:"讲师回复-2"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),d("blockquote",[d("p",[a._v("    你说的没错，sticky 可以进行粘性定位，在页面滚动的过程中很有用，是我这边写漏了")])]),a._v(" "),d("h5",{attrs:{id:"涛"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#涛"}},[a._v("#")]),a._v(" **涛：")]),a._v(" "),d("blockquote",[d("p",[a._v("之前快手的面试官和我聊到：浮动的元素会不会脱离文档流，我的答案是会，但是面试官告诉我不会。文章里也提到了这一点，所以来讨论一下，就如这个问题中（https://segmentfault.com/q/1010000002870442/a-1020000002870502）提到的一样：float元素并不会彻底地脱离文档流")])]),a._v(" "),d("h6",{attrs:{id:"讲师回复-3"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-3"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),d("blockquote",[d("p",[a._v("    可以查看 MDN 中的描述：“float CSS属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流动(文档流)中移除，尽管仍然保持部分的流动性。”可见，浮动元素的确会从文档流中删除，但它并不是完全彻底地移除。\n而我们常说的“脱离”二字并没有官方的定义，因此你和你的面试官理解或许不一样。如果将脱离认为是不符合正常的文档流，那么它便是脱离的；如果将脱离认为是彻底从文档流中移除，那么它便是不会脱离的。")])]),a._v(" "),d("h5",{attrs:{id:"圳"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#圳"}},[a._v("#")]),a._v(" **圳：")]),a._v(" "),d("blockquote",[d("p",[a._v("九种方式，定宽高3种，不定宽高6种")])]),a._v(" "),d("h5",{attrs:{id:"北"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#北"}},[a._v("#")]),a._v(" **北：")]),a._v(" "),d("blockquote",[d("p",[a._v("疑惑，float布局部分，div6也设置了float，按理说应该会向上同级浮动元素，不应该是div4嘛，为啥4.5还重叠了，6位置还是之前的")])]),a._v(" "),d("h6",{attrs:{id:"讲师回复-4"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-4"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),d("blockquote",[d("p",[a._v("    其实你在浏览器中进行观察，就会发现实际上 div4 和 div5 的占位并没有重合，如果你试试给它们加上背景颜色就能看的比较清楚了。之所以看起来它们重合了，是因为浮动元素会对相邻的元素造成影响，其中就包括了文字会尽可能围绕浮动元素。在 div4 上加上 clear: left; 就可以清除 float 带来的影响")])]),a._v(" "),d("h5",{attrs:{id:"星"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#星"}},[a._v("#")]),a._v(" **星：")]),a._v(" "),d("blockquote",[d("p",[a._v("老师，float布局这里我有一个疑问，div2, div3 设置了float:left, 脱离文档流，div2重叠到div4上面，为什么4被挤出了盒子和5重叠了而不是2与4重叠呢，我知道实际上是div2和div4重叠的，不理解的是为什么div4里边的文字4被挤了出去")])]),a._v(" "),d("h6",{attrs:{id:"讲师回复-5"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-5"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),d("blockquote",[d("p",[a._v("    因为浮动元素会对相邻的元素造成影响，其中就包括了文字会尽可能围绕浮动元素。在 div4 上加上 clear: left; 就可以清除 float 带来的影响")])]),a._v(" "),d("h5",{attrs:{id:"雅"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#雅"}},[a._v("#")]),a._v(" *雅：")]),a._v(" "),d("blockquote",[d("p",[a._v("**飞的第一二两种方式，position:relative配top: 50%真的可以吗？试了不行啊，position:absolute时，top:50%才起效吧")])]),a._v(" "),d("h6",{attrs:{id:"讲师回复-6"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-6"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),d("blockquote",[d("p",[a._v("    是的，应该是父元素需要将 position 设置为 relative/absolute/fixed，同时子元素需要为 position:absolute")])]),a._v(" "),d("h5",{attrs:{id:"好"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#好"}},[a._v("#")]),a._v(" *好：")]),a._v(" "),d("blockquote",[d("p",[a._v("除了前面的还有tabel-cell")])]),a._v(" "),d("h6",{attrs:{id:"讲师回复-7"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-7"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),d("blockquote",[d("p",[a._v("    是的，不过 table-cell 现在很少人使用了，flexbox 使用要方便和简单很多")])]),a._v(" "),d("h5",{attrs:{id:"星-2"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#星-2"}},[a._v("#")]),a._v(" **星：")]),a._v(" "),d("blockquote",[d("p",[a._v("都是干货😀")])]),a._v(" "),d("h5",{attrs:{id:"聪-2"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#聪-2"}},[a._v("#")]),a._v(" *聪：")]),a._v(" "),d("blockquote",[d("p",[a._v("纠正老师的读音：赘（zhuì）述😀")])]),a._v(" "),d("h6",{attrs:{id:"讲师回复-8"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-8"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),d("blockquote",[d("p",[a._v("    [哭泣]我的确想这么念的来着，可是我的广普不允许")])]),a._v(" "),d("h5",{attrs:{id:"贤"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#贤"}},[a._v("#")]),a._v(" **贤：")]),a._v(" "),d("blockquote",[d("p",[a._v("使用display:table-cell，还有一种就是使用grid网格行列去实现")])])])}),[],!1,null,null,null);t.default=i.exports}}]);