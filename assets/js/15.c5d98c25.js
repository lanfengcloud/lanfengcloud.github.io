(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{504:function(a,t,s){"use strict";s.r(t);var d=s(30),e=Object(d.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",{attrs:{"data-nodeid":"3223"}},[a._v("从这一讲开始，我会介绍浏览器相关的内容，比如浏览器中的网络请求过程、HTTP 协议在浏览器中的应用、浏览器中页面的渲染过程，等等。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3224"}},[a._v("我们知道，浏览器的主要功能是展示网页资源，包括向服务器发起请求、从服务器获取相关资源，并将网页显示在浏览器窗口中。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3225"}},[a._v("当我们去面试的时候，常常会被问到一个问题：在浏览器里面输入 url，按下回车键，会发生什么？")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3226"}},[a._v("这个问题涉及浏览器中的运行机制和页面加载流程，并且这些内容也都穿插在我们日常开发中，包括前后端联调、对网页进行性能优化等。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3227"}},[a._v("今天我会先跟你聊一聊浏览器中网络请求是怎么进行的，这样你对整个网页渲染会有个更好的认识。")]),a._v(" "),s("h3",{attrs:{"data-nodeid":"3228"}},[a._v("页面的请求过程")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3959"}},[a._v("当我们打开某个网站的页面，浏览器就会发起网络请求获取该页面的资源，我们也可以从控制台看到以下的请求信息：")]),a._v(" "),s("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"4509"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/3A/43/CioPOWB-mNuAW9DeACuz6pYKl7A063.png",alt:"图片4_waifu2x_1x_2n_png_waifu2x_2x_2n_png.png","data-nodeid":"4528"}}),s("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/3A/3B/Cgp9HWB-mNSABk8XACuz6pYKl7A307.png",alt:"图片4_waifu2x_1x_2n_png_waifu2x_2x_2n_png.png","data-nodeid":"4547"}})]),a._v(" "),s("p",{attrs:{"data-nodeid":"3231"}},[a._v("在 Network 面板里，我们能看到所有浏览器发起的网络请求，包括页面、图片、CSS 文件、XHR 请求等，还能看到请求的状态（200 成功、404 找不到、缓存、重定向等等）、耗时、请求头和内容、返回头和内容等。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3232"}},[a._v("图中第一个就是网站页面的请求，返回"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3351"}},[a._v("<html>")]),a._v("页面。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3233"}},[a._v("接下来，浏览器会加载页面，同时页面中涉及的外部资源也会根据需要，在特定的时机触发请求下载，包括我们看到的 PNG 图片、JavaScript 文件（这里没有 CSS 样式，是因为样式被直出在"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3354"}},[a._v("<html>")]),a._v("页面内容里了）。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3234"}},[a._v("回到前面的问题，实际上当我们在浏览器输入网页地址，按下回车键后，浏览器的处理过程如下：")]),a._v(" "),s("ol",{attrs:{"data-nodeid":"3235"}},[s("li",{attrs:{"data-nodeid":"3236"}},[s("p",{attrs:{"data-nodeid":"3237"}},[a._v("DNS 域名解析（此处涉及 DNS 的寻址过程），找到网页的存放服务器；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3238"}},[s("p",{attrs:{"data-nodeid":"3239"}},[a._v("浏览器与服务器建立 TCP 连接；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3240"}},[s("p",{attrs:{"data-nodeid":"3241"}},[a._v("浏览器发起 HTTP 请求；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3242"}},[s("p",{attrs:{"data-nodeid":"3243"}},[a._v("服务器响应 HTTP 请求，返回该页面的 HTML 内容；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3244"}},[s("p",{attrs:{"data-nodeid":"3245"}},[a._v("浏览器解析 HTML 代码，并请求 HTML 代码中的资源（如 JavaScript、CSS、图片等，此处可能涉及 HTTP 缓存）；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3246"}},[s("p",{attrs:{"data-nodeid":"3247"}},[a._v("浏览器对页面进行渲染呈现给用户（此处涉及浏览器的渲染原理）。")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"3248"}},[a._v("HTTP 缓存和浏览器渲染原理会分别在第 7 讲和第 8 讲中讲述，今天我们主要围绕 HTTP 请求相关展开。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3249"}},[a._v("首先我们来看 DNS 解析过程。")]),a._v(" "),s("h4",{attrs:{"data-nodeid":"3250"}},[a._v("DNS 解析")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3251"}},[a._v("DNS 的全称是 Domain Name System，又称域名系统，它负责把"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3367"}},[a._v("www.qq.com")]),a._v("这样的域名地址翻译成一个 IP（比如"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3369"}},[a._v("14.18.180.206")]),a._v("），而客户端与服务器建立 TCP 连接需要通过 IP 通信。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3252"}},[a._v("让客户端和服务器连接并不是靠域名进行，在网络中每个终端之间实现连接和通信是通过一个唯一的 IP 地址来完成。在建立 TCP 连接前，我们需要找到建立连接的服务器，DNS 的解析过程可以让用户通过域名找到存放文件的服务器。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3253"}},[a._v("DNS 解析过程会进行递归查询，分别依次尝试从以下途径，按顺序地获取该域名对应的 IP 地址。")]),a._v(" "),s("ul",{attrs:{"data-nodeid":"3254"}},[s("li",{attrs:{"data-nodeid":"3255"}},[s("p",{attrs:{"data-nodeid":"3256"}},[a._v("浏览器缓存")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3257"}},[s("p",{attrs:{"data-nodeid":"3258"}},[a._v("系统缓存（用户操作系统 Hosts 文件 DNS 缓存）")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3259"}},[s("p",{attrs:{"data-nodeid":"3260"}},[a._v("路由器缓存")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3261"}},[s("p",{attrs:{"data-nodeid":"3262"}},[a._v("互联网服务提供商 DNS 缓存（联通、移动、电信等互联网服务提供商的 DNS 缓存服务器）")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3263"}},[s("p",{attrs:{"data-nodeid":"3264"}},[a._v("根域名服务器")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3265"}},[s("p",{attrs:{"data-nodeid":"3266"}},[a._v("顶级域名服务器")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3267"}},[s("p",{attrs:{"data-nodeid":"3268"}},[a._v("主域名服务器")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"3269"}},[a._v("DNS 解析过程会根据上述步骤进行递归查询，如果当前步骤没查到，则自动跳转到到下一步骤通过下一个 DNS 服务器进行查找。如果最终依然没找到，浏览器便会将页面响应为打开失败。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3270"}},[a._v("除此之外，我们在前后端联调过程中也常常需要配置 HOST，这个过程便是修改了浏览器缓存或是系统缓存。通过将特定域名指向我们自身的服务器 IP 地址，便可以实现通过域名访问本地环境、测试环境、预发布环境的服务器资源。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3271"}},[a._v("那为什么需要配置域名 HOST，而不直接使用 IP 地址进行访问呢？这是因为"),s("strong",{attrs:{"data-nodeid":"3387"}},[a._v("浏览器的同源策略会导致跨域问题")]),a._v("。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3272"}},[a._v("同源策略要求，只有当请求的协议、域名和端口都相同的情况下，我们才可以访问当前页面的 Cookie/LocalStorage/IndexDB、获取和操作 DOM 节点，以及发送 Ajax 请求。通过同源策略的限制，可以避免恶意的攻击者盗取用户信息，从而可以保证用户信息的安全。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3273"}},[a._v("对于非同源的请求，我们常常称为跨域请求，需要进行跨域处理。常见的跨域解决方案有这几种。")]),a._v(" "),s("ul",{attrs:{"data-nodeid":"3274"}},[s("li",{attrs:{"data-nodeid":"3275"}},[s("p",{attrs:{"data-nodeid":"3276"}},[a._v("使用"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3391"}},[a._v("document.domain + iframe")]),a._v("：只有在主域相同的时候才能使用该方法。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3277"}},[s("p",{attrs:{"data-nodeid":"3278"}},[a._v("动态创建 script(JSONP)：通过指定回调函数以及函数的传参数据，让页面执行相应的脚本内容。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3279"}},[s("p",{attrs:{"data-nodeid":"3280"}},[a._v("使用"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3395"}},[a._v("location.hash + iframe")]),a._v("：利用"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3397"}},[a._v("location.hash")]),a._v("来进行传值。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3281"}},[s("p",{attrs:{"data-nodeid":"3282"}},[a._v("使用"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3400"}},[a._v("window.name + iframe")]),a._v("：原理是"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3402"}},[a._v("window.name")]),a._v("值在不同的页面（甚至不同域名）加载后依旧存在。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3283"}},[s("p",{attrs:{"data-nodeid":"3284"}},[a._v("使用"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3405"}},[a._v("window.postMessage()")]),a._v("实现跨域通信。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3285"}},[s("p",{attrs:{"data-nodeid":"3286"}},[a._v("使用跨域资源共享 CORS（Cross-origin resource sharing）。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3287"}},[s("p",{attrs:{"data-nodeid":"3288"}},[a._v("使用 Websockets。")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"3289"}},[a._v("其中，CORS 作为现在的主流解决方案，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 Ajax 只能同源使用的限制。实现 CORS 通信的关键是服务器，只要服务端实现了 CORS 接口，就可以进行跨源通信。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3290"}},[a._v("DNS 解析完成后，浏览器获得了服务端的 IP 地址，接下来便可以向服务端发起 HTTP 请求。目前大多数 HTTP 请求都建立在 TCP 连接上，因此客户端和服务端会先建立起 TCP 连接。")]),a._v(" "),s("h4",{attrs:{"data-nodeid":"3291"}},[a._v("TCP 连接的建立")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3292"}},[a._v("TCP 连接的建立过程比较偏通信底层，在前端日常开发过程中不容易接触到。但有时候我们需要优化应用的加载耗时、请求耗时或是定位一些偏底层的问题（请求异常、HTTP 连接无法建立等），都会或多或少依赖这些偏底层的知识。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3293"}},[a._v("另外，从面试的角度看，我们需要掌握 TCP/UDP 的区别、TCP 的三次握手和四次挥手内容。")]),a._v(" "),s("ul",{attrs:{"data-nodeid":"3294"}},[s("li",{attrs:{"data-nodeid":"3295"}},[s("p",{attrs:{"data-nodeid":"3296"}},[a._v("TCP 协议提供可靠传输服务，UDP 协议则可以更快地进行通信；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3297"}},[s("p",{attrs:{"data-nodeid":"3298"}},[a._v("三次握手：指 TCP 连接的建立过程，该过程中客户端和服务端总共需要发送三个包，从而确认连接存在。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3299"}},[s("p",{attrs:{"data-nodeid":"3300"}},[a._v("四次挥手：指 TCP 连接的断开过程，该过程中需要客户端和服务端总共发送四个包以，从而确认连接关闭。")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"3301"}},[a._v("当客户端和服务端建立起 TCP 连接之后，HTTP 服务器会监听客户端发起的请求，此时客户端会发起 HTTP 请求。")]),a._v(" "),s("h4",{attrs:{"data-nodeid":"3302"}},[a._v("HTTP 请求与 TCP 协议")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3303"}},[a._v("由客户端发起的 HTTP 请求，服务器收到后会进行回复，回复内容通常包括 HTTP 状态、响应消息等，更具体的会在下一讲 HTTP 协议中进行介绍。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3304"}},[a._v("前面说过，目前大多数 HTTP 请求都是基于 TCP 协议。TCP 协议的目的是提供可靠的数据传输，它用来确保可靠传输的途径主要包括两个：")]),a._v(" "),s("ol",{attrs:{"data-nodeid":"3305"}},[s("li",{attrs:{"data-nodeid":"3306"}},[s("p",{attrs:{"data-nodeid":"3307"}},[a._v("乱序重建：通过对数据包编号来对其排序，从而使得另一端接收数据时，可以重新根据编号还原顺序。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"3308"}},[s("p",{attrs:{"data-nodeid":"3309"}},[a._v("丢包重试：可通过发送方是否得到响应，来检测出丢失的数据并重传这些数据。")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"3310"}},[a._v("通过以上方式，TCP 在传输过程中不会丢失或破坏任何数据，这也是即使出现网络故障也不会损坏文件下载的原因。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3311"}},[a._v("因此，目前大多数 HTTP 连接基于 TCP 协议。不过，在 HTTP/3 中底层支撑是 QUIC 协议，该协议使用的是 UDP 协议。因为 UDP 协议丢弃了 TCP 协议中所有的错误检查内容，因此可以更快地进行通信，更常用于直播和在线游戏的应用。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3312"}},[a._v("也就是说，HTTP/3 基于 UDP 协议实现了数据的快速传输，同时通过 QUIC 协议保证了数据的可靠传输，最终实现了又快又可靠的通信。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3313"}},[a._v("除了以上的内容，其实我们还可以去了解关于 TCP/IP 协议的分层模型、IP 寻址过程，以及 IP 协议又是如何将数据包准确无误地传递这些内容，也需要关注 HTTP/2、HTTP/3、HTTPS 这些协议的设计变更了什么、又解决了什么。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3314"}},[a._v("或许这些内容对于大多数前端开发来说，都很少会直接接触。但它就像乘法口诀在高考数学题中的角色，基本上所有题目中都会使用到，但我们很少会认为自己是因为掌握了乘法口诀才能顺利解答题目。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3315"}},[a._v("同样的，我们对网络请求的认知也常常忽略了底层 TCP/IP 知识，基本上围绕着“前端发起了请求，后台就能收到”“请求没有按预期结果返回，要么是请求包内容有误，要么后台服务异常”这样的理解去进行处理。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3316"}},[a._v("但如果某一天，我们的应用整体请求耗时突然变长，这个过程中前端和后台都没有时间上能关联的发布单，我们到底应该如何进行定位呢？如果我们对一个网络请求的完整流程不够了解，又怎么定位到底是哪个步骤出现问题了呢？甚至我们都不会想到，将 HTTP 切换到 HTTPS 也可能会影响到请求耗时。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3317"}},[a._v("下面，我们就来看一下 HTTP 请求在前端开发过程中是如何进行编程实现的，这就不得不提到 Ajax 请求了。")]),a._v(" "),s("h3",{attrs:{"data-nodeid":"3318"}},[a._v("Ajax 请求")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3319"}},[a._v("Ajax 请求这个词会频繁出现在我们的工作对话内容中，但它并不是 JavaScript 的规范，而是 Jesse James Garrett 提出的新术语："),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3433"}},[a._v("Asynchronous JavaScript and XML")]),a._v("，意思是用 JavaScript 执行异步网络请求。")]),a._v(" "),s("h4",{attrs:{"data-nodeid":"3320"}},[a._v("网络请求的发展")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3321"}},[a._v("对于浏览器来说，网络请求是用来从服务端获取需要的信息，然后解析协议和内容，来进行页面渲染或者是信息获取的过程。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3322"}},[a._v("在很久以前，我们的网络请求除了静态资源（HTML/CSS/JavaScript 等）文件的获取，主要用于表单的提交。我们在完成表单内容的填写之后，点击提交按钮，接下来表单开始提交，浏览器就会刷新页面，然后在新页面里告诉你操作是成功了还是失败了。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3323"}},[a._v("除了页面跳转刷新会影响用户体验，在表单提交过程中，使用同步请求会阻塞进程。此时用户无法继续操作页面，导致页面呈现假死状态，使得用户体验变得糟糕。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3324"}},[a._v("为了避免这种情况，我们开始使用"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3440"}},[a._v("异步请求 + 回调")]),a._v("的方式，来进行请求处理，这就是 Ajax。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3325"}},[a._v("随着时间发展，Ajax 的应用越来越广，如今使用 Ajax 已经是前端开发的基本操作。但 Ajax 是一种解决方案，在前端中的具体实现依赖使用"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3443"}},[a._v("XMLHttpRequest")]),a._v("相关 API。页面开始支持局部更新、动态加载，甚至还有懒加载、首屏加载等等，都是以"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3445"}},[a._v("XMLHttpRequest")]),a._v("为前提。")]),a._v(" "),s("h4",{attrs:{"data-nodeid":"3326"}},[a._v("XMLHttpRequest")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3327"}},[s("code",{attrs:{"data-backticks":"1","data-nodeid":"3448"}},[a._v("XMLHttpRequest")]),a._v("让发送一个 HTTP 请求变得非常容易，我们只需要简单的创建一个请求对象实例，并对它进行操作：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"3328"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" request = "),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v(" XMLHttpRequest(); "),s("span",{staticClass:"hljs-comment"},[a._v("// 新建XMLHttpRequest对象")]),a._v("\n"),s("p",[a._v("request.onreadystatechange = function () {\n "),s("span",{staticClass:"hljs-comment"},[a._v("// 状态发生变化时，函数被回调")]),a._v("\n "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (request.readyState == "),s("span",{staticClass:"hljs-number"},[a._v("4")]),a._v(") {\n   "),s("span",{staticClass:"hljs-comment"},[a._v("// 成功完成")]),a._v("\n   "),s("span",{staticClass:"hljs-comment"},[a._v("// 判断响应结果:")]),a._v("\n   "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (request.status == "),s("span",{staticClass:"hljs-number"},[a._v("200")]),a._v(") {\n     "),s("span",{staticClass:"hljs-comment"},[a._v("// 成功，通过responseText拿到响应的文本")]),a._v("\n     console.log(request.responseText);\n   } "),s("span",{staticClass:"hljs-keyword"},[a._v("else")]),a._v(" {\n     "),s("span",{staticClass:"hljs-comment"},[a._v("// 失败，根据响应码判断失败原因:")]),a._v("\n     console.log(request.status);\n   }\n}\n};")]),a._v("\n"),s("p",[s("span",{staticClass:"hljs-comment"},[a._v("// 发送请求")]),a._v("\n"),s("span",{staticClass:"hljs-comment"},[a._v("// open的参数：")]),a._v("\n"),s("span",{staticClass:"hljs-comment"},[a._v("// 一：请求方法，包括get/post等")]),a._v("\n"),s("span",{staticClass:"hljs-comment"},[a._v("// 二：请求地址")]),a._v("\n"),s("span",{staticClass:"hljs-comment"},[a._v("// 三：表示是否异步请求，若为false则是同步请求，会阻塞进程")]),a._v("\nrequest.open("),s("span",{staticClass:"hljs-string"},[a._v('"GET"')]),a._v(", "),s("span",{staticClass:"hljs-string"},[a._v('"/api/categories"')]),a._v(", "),s("span",{staticClass:"hljs-keyword"},[a._v("true")]),a._v(");\nrequest.send();\n")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"3329"}},[a._v("上面是处理一个 HTTP 请求的方法。我们通常会将它封装成一个通用的方法，方便调用。上面例子中我们根据返回的"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3451"}},[a._v("request.status")]),a._v(" 是否为"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3453"}},[a._v("200")]),a._v("来判断是否成功，但实际上"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3455"}},[a._v("200-400")]),a._v("（不包括"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3457"}},[a._v("400")]),a._v("）的范围，都可以算是成功的，因为其中还包括使用缓存、重定向等情况。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3330"}},[a._v("我们将其封装起来，同时使用 ES6 的"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3460"}},[a._v("Promise")]),a._v("的方式，我们可以将其变成一个通过"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"3462"}},[a._v("Peomise")]),a._v("进行异步回调的请求函数：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"3331"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-function"},[a._v("function "),s("span",{staticClass:"hljs-title"},[a._v("Ajax")]),s("span",{staticClass:"hljs-params"},[a._v("({ method, url, params, contentType })")]),a._v(" ")]),a._v("{\n "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" xhr = "),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v(" XMLHttpRequest();\n "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" formData = "),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v(" FormData();\n Object.keys(params).forEach((key) => {\n   formData.append(key, params[key]);\n});\n "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" "),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v(" Promise((resolve, reject) => {\n   "),s("span",{staticClass:"hljs-keyword"},[a._v("try")]),a._v(" {\n     xhr.open(method, url, "),s("span",{staticClass:"hljs-keyword"},[a._v("false")]),a._v(");\n     xhr.setRequestHeader("),s("span",{staticClass:"hljs-string"},[a._v('"Content-Type"')]),a._v(", contentType);\n     xhr.onreadystatechange = function () {\n       "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (xhr.readyState === "),s("span",{staticClass:"hljs-number"},[a._v("4")]),a._v(") {\n         "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (xhr.status >= "),s("span",{staticClass:"hljs-number"},[a._v("200")]),a._v(" && xhr.status < "),s("span",{staticClass:"hljs-number"},[a._v("400")]),a._v(") {\n           "),s("span",{staticClass:"hljs-comment"},[a._v("// 这里我们使用200-400来判断")]),a._v("\n           resolve(xhr.responseText);\n         } "),s("span",{staticClass:"hljs-keyword"},[a._v("else")]),a._v(" {\n           "),s("span",{staticClass:"hljs-comment"},[a._v("// 返回请求信息")]),a._v("\n           reject(xhr);\n         }\n       }\n     };\n     xhr.send(formData);\n   } "),s("span",{staticClass:"hljs-keyword"},[a._v("catch")]),a._v(" (err) {\n     reject(err);\n   }\n});\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"3332"}},[a._v("通过这样简单的封装，我们就可以以 Promise 的方式来发起 Ajax 请求。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3333"}},[a._v("但在具体的项目使用过程中，我们通常还需要考虑更多的问题，比如防抖节流、失败重试、缓存能力、浏览器兼容性、参数处理等。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3334"}},[a._v("这就是 HTTP 请求的编程实现。")]),a._v(" "),s("h3",{attrs:{"data-nodeid":"3335"}},[a._v("小结")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3336"}},[a._v("对前端开发来说，网络请求是开发过程中最基础却又常常容易被忽略的部分。很多人总认为网络请求不过是“向后台发请求，后台进行响应”这样简单的逻辑，而忽略了它在用户体验中的重要性。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3337"}},[a._v("实际上，在前端性能优化中，网络请求的优化往往占据了很大一部分，包括首屏直出、分包加载、数据分片拉取、使用缓存、预加载等，都是通过合理地减少网络请求内容、减少网络请求的等待耗时等方式，达到很不错的优化效果。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"3338"}},[a._v("那么，学完本讲页面的请求过程之后，你认为可以提升页面加载速度的优化方式都有哪些呢？欢迎在留言区分享你的经验。")]),s("p"),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"精选评论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[a._v("#")]),a._v(" 精选评论")]),a._v(" "),s("h5",{attrs:{id:"_8923"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8923"}},[a._v("#")]),a._v(" **8923：")]),a._v(" "),s("blockquote",[s("p",[a._v("看了这篇文章，了解一个网址url输入的过程，还有http请求的编码优化，前端性能优化可以从这几方面着手：首屏直出、分包加载，使用缓存，预加载等方式减少网络请求内容，这样提升网页响应的速度")])]),a._v(" "),s("h5",{attrs:{id:"_856"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_856"}},[a._v("#")]),a._v(" 856：")]),a._v(" "),s("blockquote",[s("p",[s("code",[a._v("document.domain + iframe")]),a._v(" 这里的iframe是什么？")])]),a._v(" "),s("h6",{attrs:{id:"讲师回复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),s("blockquote",[s("p",[s("iframe",[a._v("，它能够将另一个HTML页面嵌入到当前页面中")])])]),a._v(" "),s("h5",{attrs:{id:"安"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安"}},[a._v("#")]),a._v(" **安：")]),a._v(" "),s("blockquote",[s("p",[a._v("配置host解决的是，根据网页域名来调取其他域名或者ip的接口，相当于做了一个中间者，但是不能解决跨域失败的问题吧？")])]),a._v(" "),s("h6",{attrs:{id:"讲师回复-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),s("blockquote",[s("p",[a._v("    本地调试时，比如使用 npm run dev 起服务，本地地址常常为 localhost 或者是 127.0.0.1，这些地址如果直接发起请求是会跨域且可能被拒绝的，配置 host 很多时候是为了将支持跨域的域名映射到本地，从而可以正常地访问和进行本地调试")])]),a._v(" "),s("h5",{attrs:{id:"贤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贤"}},[a._v("#")]),a._v(" **贤：")]),a._v(" "),s("blockquote",[s("p",[a._v("proxy 代理也可以解决跨域问题吧\ndevServer: {\nproxy: {\n'/API': {    // 定义代理的名称\nchangeOrigin: true,  // 是否启动代理\ntarget: 'http://xijipan.dev.grdoc.org', // 代理的域名　　　　　pathRewrite: {'^/API','/'}  // 如果你的真实的api路径中没有/API这一个路径，把这句加上，如果本来就有/API这一路径的话，这句一定要去掉，要不然会导致域名找不到的\n}\n}\n},")])]),a._v(" "),s("h6",{attrs:{id:"讲师回复-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-3"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),s("blockquote",[s("p",[a._v("    代理只能解决本地开发的情况，本地开发更加常用的是配置 host 来解决")])]),a._v(" "),s("h5",{attrs:{id:"恒"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#恒"}},[a._v("#")]),a._v(" **恒：")]),a._v(" "),s("blockquote",[s("p",[a._v("小程序开发原理与实战 还没出版吗")])]),a._v(" "),s("h6",{attrs:{id:"讲师回复-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-4"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),s("blockquote",[s("p",[a._v("    在印刷了呢[捂脸]")])])])}),[],!1,null,null,null);t.default=e.exports}}]);