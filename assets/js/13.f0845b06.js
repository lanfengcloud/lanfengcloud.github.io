(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{347:function(a,t,d){"use strict";d.r(t);var s=d(4),v=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",{attrs:{"data-nodeid":"27241"}},[a._v("JavaScript 在运行过程中与其他语言有所不一样，如果你不理解 JavaScript 的词法环境、执行上下文等内容，很容易会在开发过程中埋下“莫名奇妙”的 Bug，比如"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"27243"}},[a._v("this")]),a._v("指向和预期不一致、某个变量不知道为什么被改了，等等。所以今天我就跟大家聊一聊 JavaScript 代码的运行过程。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25732"}},[a._v("大家都知道，JavaScript 代码是需要在 JavaScript 引擎中运行的。我们在说到 JavaScript 运行的时候，常常会提到执行环境、词法环境、作用域、执行上下文、闭包等内容。这些概念看起来都差不多，却好像又不大容易区分清楚，它们分别都在描述什么呢？")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25733"}},[a._v("这些词语都是与 JavaScript 引擎执行代码的过程有关，为了搞清楚这些概念之间的区别，我们可以回顾下 JavaScript 代码运行过程中的各个阶段。")]),a._v(" "),t("h3",{attrs:{"data-nodeid":"28245"}},[a._v("JavaScript 代码运行的各个阶段")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25735"}},[a._v("JavaScript 是弱类型语言，在运行时才能确定变量类型。即使是如今流行的 TypeScript，也只是增加了编译时（编译成 JavaScript）的类型检测（对于编译器相信大家都有所了解，代码编译过程中编译器会进行词法分析、语法分析、语义分析、生成 AST 等处理）。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25736"}},[a._v("同样，JavaScript 引擎在执行 JavaScript 代码时，也会从上到下进行词法分析、语法分析、语义分析等处理，并在代码解析完成后生成 AST（抽象语法树），最终根据 AST 生成 CPU 可以执行的机器码并执行。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25737"}},[a._v("这个过程，我们后面统一描述为语法分析阶段。除了语法分析阶段，JavaScript 引擎在执行代码时还会进行其他的处理。以 V8 引擎为例，在 V8 引擎中 JavaScript 代码的运行过程主要分成三个阶段。")]),a._v(" "),t("ol",{attrs:{"data-nodeid":"31294"}},[t("li",{attrs:{"data-nodeid":"31295"}},[t("p",{attrs:{"data-nodeid":"31296"}},[t("strong",{attrs:{"data-nodeid":"31305"}},[a._v("语法分析阶段。")]),a._v(" 该阶段会对代码进行语法分析，检查是否有语法错误（SyntaxError），如果发现语法错误，会在控制台抛出异常并终止执行。")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"31297"}},[t("p",{attrs:{"data-nodeid":"31298"}},[t("strong",{attrs:{"data-nodeid":"31310"}},[a._v("编译阶段。")]),a._v(" 该阶段会进行执行上下文（Execution Context）的创建，包括创建变量对象、建立作用域链、确定 this 的指向等。每进入一个不同的运行环境时，V8 引擎都会创建一个新的执行上下文。")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"31299"}},[t("p",{attrs:{"data-nodeid":"31300"}},[t("strong",{attrs:{"data-nodeid":"31315"}},[a._v("执行阶段。")]),a._v(" 将编译阶段中创建的执行上下文压入调用栈，并成为正在运行的执行上下文，代码执行结束后，将其弹出调用栈。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25745"}},[a._v("其中，语法分析阶段属于编译器通用内容，就不再赘述。前面提到的执行环境、词法环境、作用域、执行上下文等内容都是在编译和执行阶段中产生的概念。")]),a._v(" "),t("blockquote",{attrs:{"data-nodeid":"25746"}},[t("p",{attrs:{"data-nodeid":"25747"}},[a._v("关于调用栈的内容我们会在下一讲详细讲解，目前我们只需要知道 JavaScript 在运行过程中会产生一个调用栈，调用栈遵循 LIFO（先进后出，后进先出）原则即可。")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25748"}},[a._v("今天，我们重点介绍编译阶段，而编译阶段的核心便是执行上下文的创建。")]),a._v(" "),t("h3",{attrs:{"data-nodeid":"32322"}},[a._v("执行上下文的创建")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25750"}},[a._v("执行上下文的创建离不开 JavaScript 的运行环境，JavaScript 运行环境包括全局环境、函数环境和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25933"}},[a._v("eval")]),a._v("，其中全局环境和函数环境的创建过程如下：")]),a._v(" "),t("ol",{attrs:{"data-nodeid":"25751"}},[t("li",{attrs:{"data-nodeid":"25752"}},[t("p",{attrs:{"data-nodeid":"25753"}},[a._v("第一次载入 JavaScript 代码时，首先会创建一个全局环境。全局环境位于最外层，直到应用程序退出后（例如关闭浏览器和网页）才会被销毁。")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25754"}},[t("p",{attrs:{"data-nodeid":"25755"}},[a._v("每个函数都有自己的运行环境，当函数被调用时，则会进入该函数的运行环境。当该环境中的代码被全部执行完毕后，该环境会被销毁。不同的函数运行环境不一样，即使是同一个函数，在被多次调用时也会创建多个不同的函数环境。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25756"}},[a._v("在不同的运行环境中，变量和函数可访问的其他数据范围不同，环境的行为（比如创建和销毁）也有所区别。而每进入一个不同的运行环境时，JavaScript 都会创建一个新的执行上下文，该过程包括：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25757"}},[t("li",{attrs:{"data-nodeid":"25758"}},[t("p",{attrs:{"data-nodeid":"25759"}},[a._v("建立作用域链（Scope Chain）；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25760"}},[t("p",{attrs:{"data-nodeid":"25761"}},[a._v("创建变量对象（Variable Object，简称 VO）；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25762"}},[t("p",{attrs:{"data-nodeid":"25763"}},[a._v("确定 this 的指向。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25764"}},[a._v("由于建立作用域链过程中会涉及变量对象的概念，因此我们先来看看变量对象的创建，再看建立作用域链和确定 this 的指向。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"33330"}},[a._v("创建变量对象")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25766"}},[a._v("什么是变量对象呢？每个执行上下文都会有一个关联的变量对象，该对象上会保存这个上下文中定义的所有变量和函数。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25767"}},[a._v("而在浏览器中，全局环境的变量对象是"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25945"}},[a._v("window")]),a._v("对象，因此所有的全局变量和函数都是作为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25947"}},[a._v("window")]),a._v("对象的属性和方法创建的。相应的，在 Node 中全局环境的变量对象则是"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25949"}},[a._v("global")]),a._v("对象。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25768"}},[a._v("了解了什么是变量对象之后，我们来看下创建变量对象的过程。创建变量对象将会创建"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25952"}},[a._v("arguments")]),a._v("对象（仅函数环境下），同时会检查当前上下文的函数声明和变量声明。")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25769"}},[t("li",{attrs:{"data-nodeid":"25770"}},[t("p",{attrs:{"data-nodeid":"25771"}},[a._v("对于变量声明：此时会给变量分配内存，并将其初始化为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25955"}},[a._v("undefined")]),a._v("（该过程只进行定义声明，执行阶段才执行赋值语句）。")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25772"}},[t("p",{attrs:{"data-nodeid":"25773"}},[a._v("对于函数声明：此时会在内存里创建函数对象，并且直接初始化为该函数对象。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25774"}},[a._v("上述变量声明和函数声明的处理过程，便是我们常说的变量提升和函数提升，其中函数声明提升会优先于变量声明提升。因为变量提升容易带来变量在预期外被覆盖掉的问题，同时还可能导致本应该被销毁的变量没有被销毁等情况。因此 ES6 中引入了"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25959"}},[a._v("let")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25961"}},[a._v("const")]),a._v("关键字，从而使 JavaScript 也拥有了块级作用域。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25775"}},[a._v("或许你会感到疑惑，JavaScript 是怎么支持块级作用域的呢？这就涉及作用域的概念。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25776"}},[a._v("在各类编程语言中，作用域分为静态作用域和动态作用域。JavaScript 采用的是词法作用域（Lexical Scoping），也就是静态作用域。词法作用域中的变量，在编译过程中会产生一个确定的作用域。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25777"}},[a._v("到这里，或许你对会词法作用域、作用域、执行上下文、词法环境之间的关系依然感到混乱，没关系，我这就来给你梳理下。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25778"}},[a._v("刚刚说到，词法作用域中的变量，在编译过程中会产生一个确定的作用域，这个作用域即当前的执行上下文，在 ES5 后我们使用词法环境（Lexical Environment）替代作用域来描述该执行上下文。因此，词法环境可理解为我们常说的作用域，同样也指当前的执行上下文（注意，是当前的执行上下文）。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25779"}},[a._v("在 JavaScript 中，词法环境又分为词法环境（Lexical Environment）和变量环境（Variable Environment）两种，其中：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25780"}},[t("li",{attrs:{"data-nodeid":"25781"}},[t("p",{attrs:{"data-nodeid":"25782"}},[a._v("变量环境用来记录"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25969"}},[a._v("var")]),a._v("/"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25971"}},[a._v("function")]),a._v("等变量声明；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25783"}},[t("p",{attrs:{"data-nodeid":"25784"}},[a._v("词法环境是用来记录"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25974"}},[a._v("let")]),a._v("/"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25976"}},[a._v("const")]),a._v("/"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25978"}},[a._v("class")]),a._v("等变量声明。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25785"}},[a._v("也就是说，创建变量过程中会进行函数提升和变量提升，JavaScript 会通过词法环境来记录函数和变量声明。通过使用两个词法环境（而不是一个）分别记录不同的变量声明内容，JavaScript 实现了支持块级作用域的同时，不影响原有的变量声明和函数声明。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25786"}},[a._v("这就是创建变量的过程，它属于执行上下文创建中的一环。创建变量的过程会产生作用域，作用域也被称为词法环境，那词法环境是由什么组成的呢？下面我结合作用域链的建立过程一起来进行分析。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"34338"}},[a._v("建立作用域链")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25788"}},[a._v("作用域链，顾名思义，就是将各个作用域通过某种方式连接在一起。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25789"}},[a._v("前面说过，作用域就是词法环境，而词法环境由两个成员组成。")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25790"}},[t("li",{attrs:{"data-nodeid":"25791"}},[t("p",{attrs:{"data-nodeid":"25792"}},[a._v("环境记录（Environment Record）：用于记录自身词法环境中的变量对象。")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25793"}},[t("p",{attrs:{"data-nodeid":"25794"}},[a._v("外部词法环境引用（Outer Lexical Environment）：记录外层词法环境的引用。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25795"}},[a._v("通过外部词法环境的引用，作用域可以层层拓展，建立起从里到外延伸的一条作用域链。当某个变量无法在自身词法环境记录中找到时，可以根据外部词法环境引用向外层进行寻找，直到最外层的词法环境中外部词法环境引用为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25988"}},[a._v("null")]),a._v("，这便是作用域链的变量查询。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25796"}},[a._v("那么，这个外部词法环境引用又是怎样指向外层呢？我们来看看 JavaScript 中是如何通过外部词法环境引用来创建作用域的。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25797"}},[a._v("为了方便描述，我们将 JavaScript 代码运行过程分为定义期和执行期，前面提到的编译阶段则属于定义期。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25798"}},[a._v("来看一个例子，我们定义了全局函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25993"}},[a._v("foo")]),a._v("，并在该函数中定义了函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25995"}},[a._v("bar")]),a._v("：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25799"}},[t("code",{attrs:{"data-language":"java"}},[t("span",{staticClass:"hljs-function"},[a._v("function "),t("span",{staticClass:"hljs-title"},[a._v("foo")]),t("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n  console.dir(bar);\n  "),t("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" a = "),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(";\n  "),t("span",{staticClass:"hljs-function"},[a._v("function "),t("span",{staticClass:"hljs-title"},[a._v("bar")]),t("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n    a = "),t("span",{staticClass:"hljs-number"},[a._v("2")]),a._v(";\n  }\n}\nconsole.dir(foo);\nfoo();\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25800"}},[a._v("前面我们说到，JavaScript 使用的是静态作用域，因此函数的作用域在定义期已经决定了。在上面的例子中，全局函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"25998"}},[a._v("foo")]),a._v("创建了一个"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26000"}},[a._v("foo")]),a._v("的"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26002"}},[a._v("[[scope]]")]),a._v("属性，包含了全局"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26004"}},[a._v("[[scope]]")]),a._v("：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25801"}},[t("code",{attrs:{"data-language":"java"}},[a._v("foo[[scope]] = [globalContext];\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25802"}},[a._v("而当我们执行"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26007"}},[a._v("foo()")]),a._v("时，也会分别进入"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26009"}},[a._v("foo")]),a._v("函数的定义期和执行期。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25803"}},[a._v("在"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26012"}},[a._v("foo")]),a._v("函数的定义期时，函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26014"}},[a._v("bar")]),a._v("的"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26016"}},[a._v("[[scope]]")]),a._v("将会包含全局"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26018"}},[a._v("[[scope]]")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26020"}},[a._v("foo")]),a._v("的"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26022"}},[a._v("[[scope]]")]),a._v("：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25804"}},[t("code",{attrs:{"data-language":"java"}},[a._v("bar[[scope]] = [fooContext, globalContext];\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25805"}},[a._v("运行上述代码，我们可以在控制台看到符合预期的输出：")]),a._v(" "),t("p",{attrs:{"data-nodeid":"35346"}},[t("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/37/18/Cgp9HWB1uyGAAaZIAAK9qHI3wvE362.png",alt:"图片2.png","data-nodeid":"35349"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"25808"}},[a._v("可以看到：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25809"}},[t("li",{attrs:{"data-nodeid":"25810"}},[t("p",{attrs:{"data-nodeid":"25811"}},[t("code",{attrs:{"data-backticks":"1","data-nodeid":"26032"}},[a._v("foo")]),a._v("的"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26034"}},[a._v("[[scope]]")]),a._v("属性包含了全局"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26036"}},[a._v("[[scope]]")])])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25812"}},[t("p",{attrs:{"data-nodeid":"25813"}},[t("code",{attrs:{"data-backticks":"1","data-nodeid":"26037"}},[a._v("bar")]),a._v("的"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26039"}},[a._v("[[scope]]")]),a._v("将会包含全局"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26041"}},[a._v("[[scope]]")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26043"}},[a._v("foo")]),a._v("的"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26045"}},[a._v("[[scope]]")])])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25814"}},[a._v("也就是说，"),t("strong",{attrs:{"data-nodeid":"26051"}},[a._v("JavaScript 会通过外部词法环境引用来创建变量对象的一个作用域链，从而保证对执行环境有权访问的变量和函数的有序访问")]),a._v("。除了创建作用域链之外，在这个过程中还会对创建的变量对象做一些处理。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25815"}},[a._v("前面我们说过，编译阶段会进行变量对象（VO）的创建，该过程会进行函数声明和变量声明，这时候变量的值被初始化为 undefined。在代码进入执行阶段之后，JavaScript 会对变量进行赋值，此时变量对象会转为活动对象（Active Object，简称 AO），转换后的活动对象才可被访问，这就是 VO -> AO 的过程。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25816"}},[a._v("为了更好地理解这个过程，我们来看个例子，我们在"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26054"}},[a._v("foo")]),a._v("函数中定义了变量"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26056"}},[a._v("b")]),a._v("、函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26058"}},[a._v("c")]),a._v("和函数表达式变量"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26060"}},[a._v("d")]),a._v("：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25817"}},[t("code",{attrs:{"data-language":"java"}},[t("span",{staticClass:"hljs-function"},[a._v("function "),t("span",{staticClass:"hljs-title"},[a._v("foo")]),t("span",{staticClass:"hljs-params"},[a._v("(a)")]),a._v(" ")]),a._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" b = "),t("span",{staticClass:"hljs-number"},[a._v("2")]),a._v(";\n  "),t("span",{staticClass:"hljs-function"},[a._v("function "),t("span",{staticClass:"hljs-title"},[a._v("c")]),t("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{}\n  "),t("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" d = function() {};\n}\n​\nfoo("),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(");\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25818"}},[a._v("在执行"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26063"}},[a._v("foo(1)")]),a._v("时，首先进入定义期，此时：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25819"}},[t("li",{attrs:{"data-nodeid":"25820"}},[t("p",{attrs:{"data-nodeid":"25821"}},[a._v("参数变量"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26066"}},[a._v("a")]),a._v("的值为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26068"}},[a._v("1")])])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25822"}},[t("p",{attrs:{"data-nodeid":"25823"}},[a._v("变量"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26070"}},[a._v("b")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26072"}},[a._v("d")]),a._v("初始化为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26074"}},[a._v("undefined")])])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25824"}},[t("p",{attrs:{"data-nodeid":"25825"}},[a._v("函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26076"}},[a._v("c")]),a._v("创建函数并初始化")])])]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25826"}},[t("code",{attrs:{"data-language":"java"}},[a._v("AO = {\n  arguments: {\n    "),t("span",{staticClass:"hljs-number"},[a._v("0")]),a._v(": "),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(",\n    length: "),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v("\n  },\n  a: "),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(",\n  b: undefined,\n  c: "),t("span",{staticClass:"hljs-function"},[a._v("reference to function "),t("span",{staticClass:"hljs-title"},[a._v("c")]),t("span",{staticClass:"hljs-params"},[a._v("()")])]),a._v("{},\n  d: undefined\n}\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25827"}},[a._v("前面我们也有提到，进入执行期之后，会执行赋值语句进行赋值，此时变量"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26079"}},[a._v("b")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26081"}},[a._v("d")]),a._v("会被赋值为 2 和函数表达式：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25828"}},[t("code",{attrs:{"data-language":"java"}},[a._v("AO = {\n   arguments: {\n    "),t("span",{staticClass:"hljs-number"},[a._v("0")]),a._v(": "),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(",\n    length: "),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v("\n  },\n  a: "),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(",\n  b: "),t("span",{staticClass:"hljs-number"},[a._v("2")]),a._v(",\n  c: "),t("span",{staticClass:"hljs-function"},[a._v("reference to function "),t("span",{staticClass:"hljs-title"},[a._v("c")]),t("span",{staticClass:"hljs-params"},[a._v("()")])]),a._v("{},\n  d: reference to FunctionExpression "),t("span",{staticClass:"hljs-string"},[a._v('"d"')]),a._v("\n}\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25829"}},[a._v("这就是 VO -> AO 过程。")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25830"}},[t("li",{attrs:{"data-nodeid":"25831"}},[t("p",{attrs:{"data-nodeid":"25832"}},[a._v("在定义期（编译阶段）：该对象值仍为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26085"}},[a._v("undefined")]),a._v("，且处于不可访问的状态。")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25833"}},[t("p",{attrs:{"data-nodeid":"25834"}},[a._v("进入执行期（执行阶段）：VO 被激活，其中变量属性会进行赋值。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25835"}},[a._v("实际上在执行的时候，除了 VO 被激活，活动对象还会添加函数执行时传入的参数和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26089"}},[a._v("arguments")]),a._v("这个特殊对象，因此 AO 和 VO 的关系可以用以下关系来表达：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25836"}},[t("code",{attrs:{"data-language":"java"}},[a._v("AO = VO + function parameters + arguments\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25837"}},[a._v("现在，我们知道作用域链是在进入代码的执行阶段时，通过外部词法环境引用来创建的。总结如下：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25838"}},[t("li",{attrs:{"data-nodeid":"25839"}},[t("p",{attrs:{"data-nodeid":"25840"}},[a._v("在编译阶段，JavaScript 在创建执行上下文的时候会先创建变量对象（VO）；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25841"}},[t("p",{attrs:{"data-nodeid":"25842"}},[a._v("在执行阶段，变量对象（VO）被激活为活动对象（ AO），函数内部的变量对象通过外部词法环境的引用创建作用域链。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25843"}},[a._v("虽然 JavaScript 代码的运行过程可以分为语法分析阶段、编译阶段和执行阶段，但由于在 JavaScript 引擎中是通过调用栈的方式来执行 JavaScript 代码的（下一讲会介绍），因此并不存在“整个 JavaScript 运行过程只会在某个阶段中”这一说法，比如上面例子中"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26095"}},[a._v("bar")]),a._v("函数的编译阶段，其实是在"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26097"}},[a._v("foo")]),a._v("函数的执行阶段中。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25844"}},[a._v("一般来说，当函数执行结束之后，执行期上下文将被销毁（作用域链和活动对象均被销毁）。但有时候我们想要保留其中一些变量对象，不想被销毁，此时就会使用到闭包。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25845"}},[a._v("我们已经知道，通过作用域链，我们可以在函数内部可以直接读取外部以及全局变量，但外部环境是无法访问内部函数里的变量。比如下面的例子中，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26101"}},[a._v("foo")]),a._v("函数中定义了变量"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26103"}},[a._v("a")]),a._v("：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25846"}},[t("code",{attrs:{"data-language":"java"}},[t("span",{staticClass:"hljs-function"},[a._v("function "),t("span",{staticClass:"hljs-title"},[a._v("foo")]),t("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" a = "),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(";\n}\nfoo();\nconsole.log(a); "),t("span",{staticClass:"hljs-comment"},[a._v("// undefined")]),a._v("\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25847"}},[a._v("我们在全局环境下无法访问函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26106"}},[a._v("foo")]),a._v("中的变量"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26108"}},[a._v("a")]),a._v("，这是因为全局函数的作用域链里，不含有函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26110"}},[a._v("foo")]),a._v("内的作用域。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25848"}},[a._v("如果我们想要访问内部函数的变量，可以通过函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26113"}},[a._v("foo")]),a._v("中的函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26115"}},[a._v("bar")]),a._v("返回变量"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26117"}},[a._v("a")]),a._v("，并将函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26119"}},[a._v("bar")]),a._v("返回，这样我们在全局环境中也可以通过调用函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26121"}},[a._v("foo")]),a._v("返回的函数"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26123"}},[a._v("bar")]),a._v("，来访问变量"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26125"}},[a._v("a")]),a._v("：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25849"}},[t("code",{attrs:{"data-language":"java"}},[t("span",{staticClass:"hljs-function"},[a._v("function "),t("span",{staticClass:"hljs-title"},[a._v("foo")]),t("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" a = "),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(";\n  "),t("span",{staticClass:"hljs-function"},[a._v("function "),t("span",{staticClass:"hljs-title"},[a._v("bar")]),t("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" a;\n  }\n  "),t("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" bar;\n}\n"),t("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" b = foo();\nconsole.log(b()); "),t("span",{staticClass:"hljs-comment"},[a._v("// 1")]),a._v("\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25850"}},[a._v("前面我们说到，当函数执行结束之后，执行期上下文将被销毁，其中包括作用域链和激活对象。那么，在这个例子中，当"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26128"}},[a._v("b()")]),a._v("执行时，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26130"}},[a._v("foo")]),a._v("函数上下文包括作用域都已经被销毁了，为什么"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26132"}},[a._v("foo")]),a._v("作用域下的"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26134"}},[a._v("a")]),a._v("依然可以被访问到呢？")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25851"}},[a._v("这是因为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26137"}},[a._v("bar")]),a._v("函数引用了"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26139"}},[a._v("foo")]),a._v("函数变量对象中的值，此时即使创建"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26141"}},[a._v("bar")]),a._v("函数的"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26143"}},[a._v("foo")]),a._v("函数执行上下文被销毁了，但它的变量对象依然会保留在 JavaScript 内存中，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26145"}},[a._v("bar")]),a._v("函数依然可以通过"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26147"}},[a._v("bar")]),a._v("函数的作用域链找到它，并进行访问。这便是我们常说的闭包，即使创建它的上下文已经销毁，它仍然被保留在内存中。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25852"}},[a._v("闭包使得我们可以从外部读取局部变量，在大多数项目中都会被使用到，常见的用途包括：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25853"}},[t("li",{attrs:{"data-nodeid":"25854"}},[t("p",{attrs:{"data-nodeid":"25855"}},[a._v("用于从外部读取其他函数内部变量的函数；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25856"}},[t("p",{attrs:{"data-nodeid":"25857"}},[a._v("可以使用闭包来模拟私有方法；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25858"}},[t("p",{attrs:{"data-nodeid":"25859"}},[a._v("让这些变量的值始终保持在内存中。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25860"}},[a._v("需要注意的是，我们在使用闭包的时候，需要及时清理不再使用到的变量，否则可能导致内存泄漏问题。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25861"}},[a._v("相信大家现在已经掌握了作用域链的建立过程，那么作用域链的用途想必大家也已经了解，比如在函数执行过程中变量的解析：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25862"}},[t("li",{attrs:{"data-nodeid":"25863"}},[t("p",{attrs:{"data-nodeid":"25864"}},[a._v("从当前词法环境开始，沿着作用域链逐级向外层寻找环境记录，直到找到同名变量为止；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25865"}},[t("p",{attrs:{"data-nodeid":"25866"}},[a._v("找到后不再继续遍历，找不到就报错。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25867"}},[a._v("下面我们继续来看，执行上下文的创建过程中还会做的一件事：确定"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26158"}},[a._v("this")]),a._v("的指向。")]),a._v(" "),t("h4",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"38350"}},[a._v("确定 this 的指向")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25869"}},[a._v("在 JavaScript 中，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26162"}},[a._v("this")]),a._v("指向执行当前代码对象的所有者，可简单理解为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26164"}},[a._v("this")]),a._v("指向最后调用当前代码的那个对象。相信大家都很熟悉"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26166"}},[a._v("this")]),a._v("，因此这里我就进行结论性的简单总结。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25870"}},[a._v("根据 JavaScript 中函数的调用方式不同，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26169"}},[a._v("this")]),a._v("的指向分为以下情况。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"36348"}},[t("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/37/18/Cgp9HWB1uzSAQvuHAAJh7k1PAh8263.png",alt:"this 指向.png","data-nodeid":"36351"}})]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25872"}},[t("li",{attrs:{"data-nodeid":"25873"}},[t("p",{attrs:{"data-nodeid":"25874"}},[a._v("在全局环境中，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26175"}},[a._v("this")]),a._v("指向全局对象（在浏览器中为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26177"}},[a._v("window")]),a._v("）")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25875"}},[t("p",{attrs:{"data-nodeid":"25876"}},[a._v("在函数内部，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26180"}},[a._v("this")]),a._v("的值取决于函数被调用的方式")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25877"}},[t("li",{attrs:{"data-nodeid":"25878"}},[t("p",{attrs:{"data-nodeid":"25879"}},[a._v("函数作为对象的方法被调用，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26183"}},[a._v("this")]),a._v("指向调用这个方法的对象")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25880"}},[t("p",{attrs:{"data-nodeid":"25881"}},[a._v("函数用作构造函数时（使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26186"}},[a._v("new")]),a._v("关键字），它的"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26188"}},[a._v("this")]),a._v("被绑定到正在构造的新对象")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25882"}},[t("p",{attrs:{"data-nodeid":"25883"}},[a._v("在类的构造函数中，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26191"}},[a._v("this")]),a._v("是一个常规对象，类中所有非静态的方法都会被添加到"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26193"}},[a._v("this")]),a._v("的原型中")])])])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25884"}},[t("p",{attrs:{"data-nodeid":"25885"}},[a._v("在箭头函数中，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26196"}},[a._v("this")]),a._v("指向它被创建时的环境")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25886"}},[t("p",{attrs:{"data-nodeid":"25887"}},[a._v("使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26199"}},[a._v("apply")]),a._v("、"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26201"}},[a._v("call")]),a._v("、"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26203"}},[a._v("bind")]),a._v("等方式调用：根据 API 不同，可切换函数执行的上下文环境，即"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26205"}},[a._v("this")]),a._v("绑定的对象")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25888"}},[a._v("可以看到，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26208"}},[a._v("this")]),a._v("在不同的情况下会有不同的指向，在 ES6 箭头函数还没出现之前，为了能正确获取某个运行环境下"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26210"}},[a._v("this")]),a._v("对象，我们常常会使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26212"}},[a._v("var that = this;")]),a._v("、"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26214"}},[a._v("var self = this;")]),a._v("这样的代码将变量分配给"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26216"}},[a._v("this")]),a._v("，便于使用。这种方式降低了代码可读性，因此如今这种做法不再被提倡，通过正确使用箭头函数，我们可以更好地管理作用域。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25889"}},[a._v("到这里，围绕 JavaScript 的编译阶段和执行阶段中执行上下文创建相关的内容已经介绍完毕。")]),a._v(" "),t("h3",{attrs:{"data-nodeid":"37350"}},[a._v("小结")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25891"}},[a._v("今天我主要介绍了 JavaScript 代码的运行过程，该过程分为语法分析阶段、编译阶段、执行阶段三个阶段。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25892"}},[a._v("在编译阶段，JavaScript会进行执行上下文的创建，包括：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"25893"}},[t("li",{attrs:{"data-nodeid":"25894"}},[t("p",{attrs:{"data-nodeid":"25895"}},[a._v("创建变量对象，进行变量声明和函数声明，此时会产生变量提升和函数提升；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25896"}},[t("p",{attrs:{"data-nodeid":"25897"}},[a._v("通过添加对外部词法环境的引用，建立作用域链，通过作用域链可以访问外部的变量对象；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"25898"}},[t("p",{attrs:{"data-nodeid":"25899"}},[a._v("确定 this 的指向。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25900"}},[a._v("在执行阶段，变量对象（VO）会被激活为活动对象（AO），变量会进行赋值，此时活动对象才可被访问。在执行结束之后，作用域链和活动对象均被销毁，使用闭包可使活动对象依然被保留在内存中。这就是 JavaScript 代码的运行过程。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25901"}},[a._v("我们前面也说过，下面这段代码中"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26227"}},[a._v("bar")]),a._v("函数的编译阶段是在"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"26229"}},[a._v("foo")]),a._v("函数的执行阶段中 ：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25902"}},[t("code",{attrs:{"data-language":"java"}},[t("span",{staticClass:"hljs-function"},[a._v("function "),t("span",{staticClass:"hljs-title"},[a._v("foo")]),t("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n  console.dir(bar);\n  "),t("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" a = "),t("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(";\n  "),t("span",{staticClass:"hljs-function"},[a._v("function "),t("span",{staticClass:"hljs-title"},[a._v("bar")]),t("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n    a = "),t("span",{staticClass:"hljs-number"},[a._v("2")]),a._v(";\n  }\n}\nconsole.dir(foo);\nfoo();\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"25903"}},[a._v("你能说出整段代码的运行过程分别是怎样的，变量对象 AO/VO、作用域链、this 指向在各个阶段中又会怎样表现呢？可以把你的想法写在留言区。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"25904"}},[a._v("其实，JavaScript 的运行过程和 EventLoop 结合可以有更好的理解，关于 EventLoop 我会在下一讲进行介绍，你也可以在学习之后再来结合本讲内容进行总结。")]),a._v(" "),t("hr"),a._v(" "),t("h3",{attrs:{id:"精选评论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[a._v("#")]),a._v(" 精选评论")]),a._v(" "),t("h5",{attrs:{id:"_2951"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2951"}},[a._v("#")]),a._v(" **2951：")]),a._v(" "),t("blockquote",[t("p",[a._v("首先将全局执行上下文栈window压入执行栈中，全局执行上下文中， foo是函数声明，被提升，函数声明提升要优先于变量提升，此时全局执行上下文栈中，只包含一个foo函数声明，同时将全局作用域绑定在foo的作用域链上，执行foo函数时，又为foo新创建一个执行上下文栈，并压入执行栈中，此时执行权由全局window，交到了foo函数上，进行编译阶段的工作，将变量a提升，bar函数声明提升，此时foo的执行上下文栈中，a是undefined， bar是一个函数声明，bar的作用域包含全局作用域和foo的作用域，执行阶段， a 赋值为1， 此时a变量对象变为了活动对象，this指向window。foo函数执行完毕，将foo从执行栈中弹出，执行权又交给window。")])]),a._v(" "),t("h5",{attrs:{id:"雨"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#雨"}},[a._v("#")]),a._v(" *雨：")]),a._v(" "),t("blockquote",[t("p",[a._v("这一节开始吃力了，有的名词以前没听过")])]),a._v(" "),t("h6",{attrs:{id:"编辑回复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编辑回复"}},[a._v("#")]),a._v("     编辑回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    哪些名词呢？可以具体说下，小编和讲师也可以针对性的帮你喔！")])]),a._v(" "),t("h5",{attrs:{id:"浩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浩"}},[a._v("#")]),a._v(" *浩：")]),a._v(" "),t("blockquote",[t("p",[a._v("再学基础知识。")])]),a._v(" "),t("h5",{attrs:{id:"宇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宇"}},[a._v("#")]),a._v(" **宇：")]),a._v(" "),t("blockquote",[t("p",[a._v("vo里面有a b变量，a可以通过闭包被外界访问，b没有，当前作用域执行完后，整个vo都被保留，还是只保留a这块内存？")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    当函数执行结束之后，执行期上下文将被销毁，其中包括作用域链和激活对象。对于闭包的场景来说，函数执行结束后，执行上下文的作用域链会被销毁，但它的激活对象仍然会被保留在内测中，这里是整个激活对象都会被保存。\n因为闭包会保留锁包含函数的作用域，所以会比其他函数更占用内存。")])]),a._v(" "),t("h5",{attrs:{id:"_4391洪育煌"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4391洪育煌"}},[a._v("#")]),a._v(" **4391洪育煌：")]),a._v(" "),t("blockquote",[t("p",[a._v("老师介绍的创建作用域链是在执行阶段出现的，那上文中创建执行上下文不是在编译阶段吗？执行上下文包含了创建作用域链不是矛盾了吗")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    文中有说，虽然 JavaScript 代码的运行过程可以分为语法分析阶段、编译阶段和执行阶段，但由于在 JavaScript 引擎中是通过调用栈的方式来执行 JavaScript 代码的（下一讲会介绍），因此并不存在“整个 JavaScript 运行过程只会在某个阶段中”这一说法，比如上面例子中 bar 函数的编译阶段，其实是在 foo 函数的执行阶段中。")])]),a._v(" "),t("h5",{attrs:{id:"泳"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泳"}},[a._v("#")]),a._v(" **泳：")]),a._v(" "),t("blockquote",[t("p",[a._v('"创建变量对象将会创建arguments对象（仅函数环境下）","除了 VO 被激活，活动对象还会添加函数执行时传入的参数和arguments这个特殊对象"。老师您好！arguments对象在编译阶段就创建了，VO=AO也就意味着在执行阶段，为什么在执行阶段又会添加一次arguments对象?')])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-3"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    在创建变量的时候，arguments 对象只是形参，进入代码的执行阶段时，真实的参数才会被传进来，最终代码的执行是以真实的传参为准的。")])]),a._v(" "),t("h5",{attrs:{id:"军"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#军"}},[a._v("#")]),a._v(" *军：")]),a._v(" "),t("blockquote",[t("p",[a._v("问一个问题呀，箭头函数内的执行上下文啥样的，没有arguments对象了吧，另外this应该指向定义箭头函数所在的执行上下文this吧")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-4"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    箭头函数表达式的语法比函数表达式更简洁，并且没有自己的 this，arguments，super 或 new.target。因此，箭头函数的 this 指向它被创建时的环境。")])]),a._v(" "),t("h5",{attrs:{id:"晶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#晶"}},[a._v("#")]),a._v(" *晶：")]),a._v(" "),t("blockquote",[t("p",[a._v("有点点疑问1.编译器分析和v8引擎执行是两部分吗?词法分析、语法分析、语义分析、生成 AST会执行两遍吗？2.变量提升是在编译阶段的创建变量对象过程中吗？不是预解析阶段吗？还是说创建变量对象的过程就是预解析的过程")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-5"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    1. 对于 JavaScript 这样的解释型脚本语言来说，都需要支持编译和解析的环境来运行脚本，对于 JavaScript 来说这就是 JavaScript 引擎，而 v8 引擎便是 JavaScript 引擎的一种。")])]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("变量提升发生在代码执行之前，可理解为在创建变量对象的过程中或者是创建变量之后，它们都在语法分析/AST后到执行代码之前的这个过程中进行的，这个过程也常常被称作预编译/预解析。")])]),a._v(" "),t("h5",{attrs:{id:"王"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#王"}},[a._v("#")]),a._v(" *王：")]),a._v(" "),t("blockquote",[t("p",[a._v("老师这里好像写错了:而当我们执行foo()时，也会分别进入foo函数的定义期和执行期。在foo函数的定义期时，函数bar的scope将会包含全局scope和foo的scope.第二个和第三个foo好像要改为bar")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-6"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    代码运行会先进入定义期，再进入执行期，这里描述应该是没有问题的")])]),a._v(" "),t("h5",{attrs:{id:"杰"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#杰"}},[a._v("#")]),a._v(" **杰：")]),a._v(" "),t("blockquote",[t("p",[a._v("js权威指南写的作用域链是在定义的时候创建的，您写的是在执行期间，是否存在冲突？")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-7"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    是在定义期哦")])]),a._v(" "),t("h5",{attrs:{id:"_4391洪育煌-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4391洪育煌-2"}},[a._v("#")]),a._v(" **4391洪育煌：")]),a._v(" "),t("blockquote",[t("p",[a._v("变量和函数提升问题：上文中说函数提升优先级更高，如果变量名和函数名重复了，覆盖问题可以详细说一下吗")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-8"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    比如 var a = 1; function a(){}\n这段代码执行时，定义期中创建函数 a 并初始化；进入执行期之后，会执行赋值语句进行赋值，因此 a 的值为 1。")])]),a._v(" "),t("h5",{attrs:{id:"泳-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泳-2"}},[a._v("#")]),a._v(" **泳：")]),a._v(" "),t("blockquote",[t("p",[a._v("“因为变量提升容易带来变量在预期外被覆盖掉的问题，同时还可能导致本应该被销毁的变量没有被销毁等情况。”请问这一句话怎么理解？我知道变量对象在创建时，当函数名和变量名相同时，函数名优先级大会覆盖变量名。预期外被覆盖和本该被销毁的变量没有被销毁的情况，麻烦您能举个具体的例子吗？想象不出场景")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-9"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    变量覆盖比如：\nvar a = 1;\nfunction b() {\nconsole.log(a);\na = 2;\nconsole.log(a);\n}\nb();\nconsole.log(a);")])]),a._v(" "),t("p",[a._v("本该被销毁的变量没有被销毁比如：\nfunction a(){\nfor (var i = 0; i < 7; i++) { }\nconsole.log(i);\n}\na()")]),a._v(" "),t("h5",{attrs:{id:"杰-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#杰-2"}},[a._v("#")]),a._v(" *杰：")]),a._v(" "),t("blockquote",[t("p",[a._v("根据最新的ECMA规范，变量环境只包含var定义的了， 函数声明已经归词法环境了")])]),a._v(" "),t("h5",{attrs:{id:"龙"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#龙"}},[a._v("#")]),a._v(" **龙：")]),a._v(" "),t("blockquote",[t("p",[a._v("老师函数名存在哪里？ class词法环境能详细讲一下吗？")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-10"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    在 ES6 中，环境记录可以分为声明式环境记录、对象环境记录和全局环境记录中，函数环境记录则是声明式环境记录的子类，而 class 也同样存在声明式环境记录中。如果感兴趣可以查阅一下 ES6 文档：https://tc39.es/ecma262/#sec-executable-code-and-execution-contexts")])]),a._v(" "),t("h5",{attrs:{id:"刚"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#刚"}},[a._v("#")]),a._v(" *刚：")]),a._v(" "),t("blockquote",[t("p",[a._v("在写VO到AO的例子中，写了两个AO对象，是否第一个应该是VO对象呢")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-11"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    是的，为了方便理解这是同一个对象，因此都使用了 AO 来描述")])])])}),[],!1,null,null,null);t.default=v.exports}}]);