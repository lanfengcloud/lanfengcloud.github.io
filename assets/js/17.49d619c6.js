(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{357:function(t,a,d){"use strict";d.r(a);var s=d(4),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"1185"}},[t._v("作为前端开发，我们的日常工作中除了编码以外，几乎大多数时间都在跟浏览器打交道。所以我们更加要吃透浏览器，掌握它到底是怎样将我们编写的代码渲染到页面中的。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1186"}},[t._v("所以，今天我主要结合浏览器的内部工作原理，深入剖析下浏览器中页面的渲染过程。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1187"}},[t._v("第 6 讲我们介绍了一个 HTTP 请求在浏览器中的请求过程，该过程将浏览器作为单独的对象，描述客户端和服务端之间的通信过程。那么，当我们在浏览器的地址栏中输入 URL，按下回车键，到页面在浏览器中渲染完成，这个过程中浏览器的内部发生了什么了呢？")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1188"}},[t._v("为了了解这个过程，首先我们要了解浏览器的内部结构。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"1189"}},[t._v("浏览器的内部结构")]),t._v(" "),a("p",{attrs:{"data-nodeid":"2065"}},[t._v("从结构上来说，浏览器主要包括了八个子系统：用户界面、浏览器引擎、渲染引擎、网络子系统、JavaScript 解释器、XML 解析器、显示后端、数据持久性子系统。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"2066"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/3B/BE/CioPOWCGef-AVdyVAAHZWEKP8kc582.png",alt:"图片2.png","data-nodeid":"2070"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1192"}},[t._v("这些子系统组合构成了我们的浏览器。页面的加载和渲染过程，离不开网络子系统、渲染引擎、JavaScript 解释器和浏览器引擎。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1193"}},[t._v("以前端开发最常使用的 Chrome 浏览器为例， Chrome 浏览器是使用多进程架构的方式来管理这些子系统。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"1194"}},[t._v("Chrome 多进程架构")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1195"}},[t._v("Chrome 浏览器采用的多进程架构，主要包括四个进程：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1196"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/3A/95/CioPOWB_9faAVGKiAAHoS6wTpmU695.png",alt:"Drawing 1.png","data-nodeid":"1327"}})]),t._v(" "),a("ol",{attrs:{"data-nodeid":"1197"}},[a("li",{attrs:{"data-nodeid":"1198"}},[a("p",{attrs:{"data-nodeid":"1199"}},[a("strong",{attrs:{"data-nodeid":"1332"}},[t._v("浏览器进程")]),t._v("：选项卡之外的所有内容都由浏览器进程处理，浏览器进程则主要用于控制和处理用户可见的 UI 部分（包括地址栏，书签，后退和前进按钮）和用户不可见的隐藏部分（例如网络请求和文件访问）。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1200"}},[a("p",{attrs:{"data-nodeid":"1201"}},[a("strong",{attrs:{"data-nodeid":"1337"}},[t._v("GPU 进程")]),t._v("：该进程用于完成图像处理任务，同时还支持分解成多个进程进行处理。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1202"}},[a("p",{attrs:{"data-nodeid":"1203"}},[a("strong",{attrs:{"data-nodeid":"1342"}},[t._v("渲染器进程")]),t._v("：Chrome 浏览器中支持多个选项卡，其中每个选项卡在单独的渲染器进程中运行，渲染器进程主要用于控制和处理选项卡中的网站内容显示。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1204"}},[a("p",{attrs:{"data-nodeid":"1205"}},[a("strong",{attrs:{"data-nodeid":"1347"}},[t._v("插件进程")]),t._v("：管理 Chrome 浏览器中的各个插件。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1206"}},[t._v("对于“在浏览器的地址栏中输入 URL，按下回车键，到浏览器渲染页面”这个过程，浏览器内部会通过浏览器进程和渲染器进程，进行很多交互逻辑，最终才得以将页面内容显示在屏幕上。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"6233"}},[t._v("其中，浏览器进程和渲染器进程同样支持多线程，包括以下这些线程。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"6835"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGelWAbiaSAAEx45xN4zQ889.png",alt:"图片9.png","data-nodeid":"6839"}}),a("br"),t._v(" "),a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/3B/BE/CioPOWCGegmAGuduAAEB_cEYcEU948.png",alt:"图片4.png","data-nodeid":"6843"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"6836"}},[t._v("这些线程其实并不陌生，在前面介绍的内容中有提到，比如：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1210"}},[a("li",{attrs:{"data-nodeid":"1211"}},[a("p",{attrs:{"data-nodeid":"1212"}},[t._v("在页面的加载过程中，涉及 GUI 渲染线程与 JavaScript 引擎线程间的互斥关系，因此页面中的"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1359"}},[t._v("<script>")]),t._v("和"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1361"}},[t._v("<style>")]),t._v("元素设计不合理会影响页面加载速度；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1213"}},[a("p",{attrs:{"data-nodeid":"1214"}},[t._v("在 UI 线程、网络线程、存储线程、浏览器事件触发线程、浏览器定时器触发线程中，I/O 事件通过异步任务完成时触发的函数回调，解决了单线程的 Javascript 阻塞问题。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1215"}},[t._v("下面我们再来看下 Chrome 浏览器中页面的渲染过程，包括浏览器进程和线程如何通信来显示页面。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"1216"}},[t._v("浏览器中页面的渲染过程")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1217"}},[t._v("首先我们将浏览器中页面的渲染过程分为两部分。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1218"}},[a("li",{attrs:{"data-nodeid":"1219"}},[a("p",{attrs:{"data-nodeid":"1220"}},[t._v("页面导航：用户输入 URL，浏览器进程进行请求和准备处理。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1221"}},[a("p",{attrs:{"data-nodeid":"1222"}},[t._v("页面渲染：获取到相关资源后，渲染器进程负责选项卡内部的渲染处理。")])])]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1223"}},[t._v("1. 页面导航过程")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1224"}},[t._v("当用户在地址栏中输入内容时，浏览器内部会进行以下处理。")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"1225"}},[a("li",{attrs:{"data-nodeid":"1226"}},[a("p",{attrs:{"data-nodeid":"1227"}},[t._v("首先浏览器进程的 UI 线程会进行处理：如果是 URI，则会发起网络请求来获取网站内容；如果不是，则进入搜索引擎。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1228"}},[a("p",{attrs:{"data-nodeid":"1229"}},[t._v("如果需要发起网络请求，请求过程由网络线程来完成。HTTP 请求响应如果是 HTML 文件，则将数据传递到渲染器进程；如果是其他文件则意味着这是下载请求，此时会将数据传递到下载管理器。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1230"}},[a("p",{attrs:{"data-nodeid":"1231"}},[t._v("如果请求响应为 HTML 内容，此时浏览器应导航到请求站点，网络线程便通知 UI 线程数据准备就绪。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1232"}},[a("p",{attrs:{"data-nodeid":"1233"}},[t._v("接下来，UI 线程会寻找一个渲染器进程来进行网页渲染。当数据和渲染器进程都准备好后，HTML 数据通过 IPC 从浏览器进程传递到渲染器进程中。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1234"}},[a("p",{attrs:{"data-nodeid":"1235"}},[t._v("渲染器进程接收 HTML 数据后，将开始加载资源并渲染页面。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1236"}},[a("p",{attrs:{"data-nodeid":"1237"}},[t._v("渲染器进程完成渲染后，通过 IPC 通知浏览器进程页面已加载。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7725"}},[t._v("以上是用户在地址栏输入网站地址，到页面开始渲染的整体过程。为了方便理解，我帮你梳理了一个流程图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7726"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGemeAeLIdAAGeyyv3jvM989.png",alt:"图片1.png","data-nodeid":"7730"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1240"}},[t._v("如果当前页面跳转到其他网站，浏览器将调用一个单独的渲染进程来处理新导航，同时保留当前渲染进程来处理像"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1384"}},[t._v("unload")]),t._v("这类事件。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1241"}},[t._v("在上面的过程中可以看到，页面导航主要依赖浏览器进程。其中，上述过程中的步骤 5 便是页面的渲染部分，该过程同样依赖渲染器进程，我们一起来看看。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1242"}},[t._v("2. 页面渲染过程")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1243"}},[t._v("前面说过，渲染器进程负责选项卡内部发生的所有事情，它的核心工作是将 HTML、CSS 和 JavaScript 转换为可交互的页面。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1244"}},[t._v("整体上，渲染器进程渲染页面的流程基本如下。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1245"}},[a("li",{attrs:{"data-nodeid":"1246"}},[a("p",{attrs:{"data-nodeid":"1247"}},[t._v("解析(Parser)：解析 HTML/CSS/JavaScript 代码。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1248"}},[a("p",{attrs:{"data-nodeid":"1249"}},[t._v("布局(Layout)：定位坐标和大小、是否换行、各种"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1394"}},[t._v("position")]),t._v("/"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1396"}},[t._v("overflow")]),t._v("/"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1398"}},[t._v("z-index")]),t._v("属性等计算。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1250"}},[a("p",{attrs:{"data-nodeid":"1251"}},[t._v("绘制(Paint)：判断元素渲染层级顺序。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1252"}},[a("p",{attrs:{"data-nodeid":"1253"}},[t._v("光栅化(Raster)：将计算后的信息转换为屏幕上的像素。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"10089"}},[t._v("大致流程如下图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"10090"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/3B/BE/CioPOWCGeqOATDmZAABqHA_KZjw863.png",alt:"图片10.png","data-nodeid":"10094"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1256"}},[t._v("我们来分别看下。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1257"}},[a("strong",{attrs:{"data-nodeid":"1412"}},[t._v("1. 解析。")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1258"}},[t._v("渲染器进程的主线程会解析以下内容：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"11271"}},[a("li",{attrs:{"data-nodeid":"11272"}},[a("p",{attrs:{"data-nodeid":"11273"}},[t._v("解析 HTML 内容，产生一个 DOM 节点树；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"11274"}},[a("p",{attrs:{"data-nodeid":"11275"}},[t._v("解析 CSS，产生 CSS 规则树；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"11276"}},[a("p",{attrs:{"data-nodeid":"11277"}},[t._v("解析 Javascript 脚本，由于 Javascript 脚本可以通过 DOM API 和 CSSOM API 来操作 DOM 节点树和 CSS 规则树，因此该过程中会等待 JavaScript 运行完成才继续解析 HTML。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"11278"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGeqqAJjA6AAN4ArIs9uY183.png",alt:"图片6.png","data-nodeid":"11284"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1267"}},[t._v("解析完成后，我们得到了 DOM 节点树和 CSS 规则树，布局过程便是通过 DOM 节点树和 CSS 规则树来构造渲染树（Render Tree）。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1268"}},[a("strong",{attrs:{"data-nodeid":"1426"}},[t._v("2. 布局。")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1269"}},[t._v("通过解析之后，渲染器进程知道每个节点的结构和样式，但如果需要渲染页面，浏览器还需要进行布局，布局过程便是我们常说的渲染树的创建过程。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"12461"}},[t._v("在这个过程中，像"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"12464"}},[t._v("header")]),t._v("或"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"12466"}},[t._v("display:none")]),t._v("的元素，它们会存在 DOM 节点树中，但不会被添加到渲染树里。")]),t._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"12462"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGeq-AM147AAHqFon6pEw645.png",alt:"图片7.png","data-nodeid":"12470"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1272"}},[t._v("布局完成后，将会进入绘制环节。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1273"}},[a("strong",{attrs:{"data-nodeid":"1442"}},[t._v("3. 绘制")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1274"}},[t._v("在绘制步骤中，渲染器主线程会遍历渲染树来创建绘制记录。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1275"}},[t._v("需要注意的是，如果渲染树发生了改变，则渲染器会触发重绘（Repaint）和重排（Reflow）。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1276"}},[a("li",{attrs:{"data-nodeid":"1277"}},[a("p",{attrs:{"data-nodeid":"1278"}},[t._v("重绘：屏幕的一部分要重画，比如某个 CSS 的背景色变了，但是元素的几何尺寸没有变。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1279"}},[a("p",{attrs:{"data-nodeid":"1280"}},[t._v("重排：元素的几何尺寸变了（渲染树的一部分或全部发生了变化），需要重新验证并计算渲染树。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1281"}},[t._v("为了不对每个小的变化都进行完整的布局计算，渲染器会将更改的元素和它的子元素进行脏位标记，表示该元素需要重新布局。其中，全局样式更改会触发全局布局，部分样式或元素更改会触发增量布局，增量布局是异步完成的，全局布局则会同步触发。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1282"}},[t._v("重排需要涉及变更的所有的结点几何尺寸和位置，成本比重绘的成本高得多的多。所以我们要注意以避免频繁地进行增加、删除、修改 DOM 结点、移动 DOM 的位置、Resize 窗口、滚动等操作，因为这些操作可能会导致性能降低。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1283"}},[a("strong",{attrs:{"data-nodeid":"1454"}},[t._v("4. 光栅化")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1284"}},[t._v("通过解析、布局和绘制过程，浏览器获得了文档的结构、每个元素的样式、绘制顺序等信息。将这些信息转换为屏幕上的像素，这个过程被称为光栅化。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1285"}},[t._v("光栅化可以被 GPU 加速，光栅化后的位图会被存储在 GPU 内存中。根据前面介绍的渲染流程，当页面布局变更了会触发重排和重绘，还需要重新进行光栅化。此时如果页面中有动画，则主线程中过多的计算任务很可能会影响动画的性能。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1286"}},[t._v("因此，现代的浏览器通常使用合成的方式，将页面的各个部分分成若干层，分别对其进行栅格化（将它们分割成了不同的瓦片），并通过合成器线程进行页面的合成。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1287"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/3A/96/CioPOWB_9tKAP-iSAAAbxYxtmYI438.png",alt:"Drawing 8.png","data-nodeid":"1460"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1288"}},[t._v("合成过程如下：")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"1289"}},[a("li",{attrs:{"data-nodeid":"1290"}},[a("p",{attrs:{"data-nodeid":"1291"}},[t._v("当主线程创建了合成层并确定了绘制顺序，便将这些信息提交给合成线程；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1292"}},[a("p",{attrs:{"data-nodeid":"1293"}},[t._v("合成器线程将每个图层栅格化，然后将每个图块发送给光栅线程；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1294"}},[a("p",{attrs:{"data-nodeid":"1295"}},[t._v("光栅线程栅格化每个瓦片，并将它们存储在 GPU 内存中；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1296"}},[a("p",{attrs:{"data-nodeid":"1297"}},[t._v("合成器线程通过 IPC 提交给浏览器进程，这些合成器帧被发送到 GPU 进程处理，并显示在屏幕上。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1298"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/3A/8D/Cgp9HWB_9tiANnD-AAE0dHoZY_A915.png",alt:"Drawing 9.png","data-nodeid":"1468"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1299"}},[t._v("合成的真正目的是，在移动合成层的时候不用重新光栅化。因为有了合成器线程，页面才可以独立于主线程进行流畅的滚动。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1300"}},[t._v("到这里，页面才真正渲染到屏幕上。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1301"}},[t._v("我们在绘制页面的时候，也可能会遇到很多奇怪的渲染问题，比如使用了"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1472"}},[t._v("transform:scale")]),t._v("可能会导致某些浏览器中渲染模糊，究其原因则是由于光栅化过程导致的。像前面所说，前端开发需要频繁跟浏览器打交道，所谓知己知彼百战不殆，我们应该对其运行过程有更好的了解。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"1302"}},[t._v("小结")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1303"}},[t._v("今天我主要介绍了浏览器的组成，可分为用户界面、浏览器引擎、渲染引擎、网络子系统、JavaScript 解释器、XML 解析器、显示后端、数据持久性子系统八个子系统，并以 Chrome 浏览器为例，从浏览器内部分工角度来介绍页面的渲染过程。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1304"}},[t._v("掌握页面的渲染过程，有利于我们进行一些性能优化，尤其如果涉及动画、游戏等频繁绘制的场景，渲染性能往往是需要不断进行优化的瓶颈。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1305"}},[t._v("今日小作业：")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"1306"}},[a("li",{attrs:{"data-nodeid":"1307"}},[a("p",{attrs:{"data-nodeid":"1308"}},[t._v("你认为 Chrome 浏览器中，为什么每个选项卡都在单独的渲染器进程中运行呢？")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1309"}},[a("p",{attrs:{"data-nodeid":"1310"}},[t._v("如何检测页面是否无响应呢？")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1311"}},[t._v("把你的想法写在留言区吧！")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[t._v("#")]),t._v(" 精选评论")]),t._v(" "),a("h5",{attrs:{id:"_2279"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2279"}},[t._v("#")]),t._v(" **2279：")]),t._v(" "),a("blockquote",[a("p",[t._v("老师，看其它的一些关于浏览器渲染过程，都是将渲染树的构建看成是一个独立的阶段呢。看了你的渲染过程不由得让我产生了究竟是渲染树的构建是和布局阶段一起的呢，还是说独立的怀疑，望指正。😅")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[t._v("#")]),t._v("     讲师回复：")]),t._v(" "),a("blockquote",[a("p",[t._v("    文中介绍渲染过程，主要分为：解析(Parser)、布局(Layout)、绘制(Paint)、光栅化(Raster) 四个过程，渲染树的构建属于布局过程，应该写得比较清楚了，请问你的疑问是？")])]),t._v(" "),a("h5",{attrs:{id:"华"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#华"}},[t._v("#")]),t._v(" **华：")]),t._v(" "),a("blockquote",[a("p",[t._v("老师，是不是分层后，浏览器就能够只渲染某一层的内容，提升效率")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[t._v("#")]),t._v("     讲师回复：")]),t._v(" "),a("blockquote",[a("p",[t._v("    分层的使用场景很多是一些动画效果，比如 transform 和 opacity 的使用，它们只更改影响合成的属性，不会导致重新计算和布局，会让渲染更加流畅")])]),t._v(" "),a("h5",{attrs:{id:"你辣条就跑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你辣条就跑"}},[t._v("#")]),t._v(" **你辣条就跑：")]),t._v(" "),a("blockquote",[a("p",[t._v("老师，检测页面是否无响应的使用场景可以说下吗？")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-3"}},[t._v("#")]),t._v("     讲师回复：")]),t._v(" "),a("blockquote",[a("p",[t._v("    可以使用 service worker 对页面进行心跳检测，当心跳断开之后就可以认为页面崩溃/无响应，将相关信息做上报就可以监测的")])]),t._v(" "),a("h5",{attrs:{id:"哈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈"}},[t._v("#")]),t._v(" **哈：")]),t._v(" "),a("blockquote",[a("p",[t._v("现代浏览器架构网络独立成一个进程了，所以打开一个tab至少包含四个进程：浏览器主进程、渲染进程、网络进程、GPU进程。关于插件，一个插件开启一个进程。")])]),t._v(" "),a("h5",{attrs:{id:"_4344"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4344"}},[t._v("#")]),t._v(" **4344：")]),t._v(" "),a("blockquote",[a("p",[t._v("老师，您好！我看在栅格化之后进行合成，文中提到了合成线程和光栅线程。请问这两个线程是属于哪个进程呢？")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-4"}},[t._v("#")]),t._v("     讲师回复：")]),t._v(" "),a("blockquote",[a("p",[t._v("    合成器线程、光栅线程都运行在渲染器进程内部，从而高效，流畅地渲染页面。")])]),t._v(" "),a("h5",{attrs:{id:"波"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#波"}},[t._v("#")]),t._v(" **波：")]),t._v(" "),a("blockquote",[a("p",[t._v("避免一个选项卡挂了，整个浏览器渲染进程挂了")])]),t._v(" "),a("h5",{attrs:{id:"阳"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阳"}},[t._v("#")]),t._v(" **阳：")]),t._v(" "),a("blockquote",[a("p",[t._v("网络进程。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程，现在应该有五个进程了吧")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-5"}},[t._v("#")]),t._v("     讲师回复：")]),t._v(" "),a("blockquote",[a("p",[t._v("    本文写作时是参照《Inside look at modern web browser》该官方文章来进行说明的，当时文章中介绍除了 GPU 进程、浏览器进程、渲染器进程、插件进程以外，还有实体进程和拓展程序进程。\n如今，除了以上进程，Chrome 浏览器独立出来的进程还包括 Network、Storage、Audio 等等，如果你想查看 Chrome 中正在运行多少个进程，请点击浏览器右上角的选项菜单，选择“更多工具”，然后选择“任务管理器”，就可以查看了~")])]),t._v(" "),a("h5",{attrs:{id:"洲"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#洲"}},[t._v("#")]),t._v(" **洲：")]),t._v(" "),a("blockquote",[a("p",[t._v("事件驱动使编写代码的流程更加清晰，但代码量大，维护相对困难，改变一处往往要牵涉好几处的更改数据驱动从应用程序中分离出视图和模型，代码量更少，今后如果要改变某些数据，只需改变对应模型层上的数据")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-6"}},[t._v("#")]),t._v("     讲师回复：")]),t._v(" "),a("blockquote",[a("p",[t._v("    赞！")])]),t._v(" "),a("h5",{attrs:{id:"聪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聪"}},[t._v("#")]),t._v(" *聪：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("每个选项卡都在单独的渲染器进程中运行是为了各个选项卡能保持独立互不干扰，防止因某一个选项卡崩溃导致所有页面都崩溃。2.检查页面无响应是不是可以利用事件循环相关，比如判断setTimeout中的回调是否被执行了，无响应的话，应该是主线程卡死，宏任务和微任务的事件都没有机会运行")])])]),t._v(" "),a("h6",{attrs:{id:"讲师回复-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-7"}},[t._v("#")]),t._v("     讲师回复：")]),t._v(" "),a("blockquote",[a("p",[t._v("    1. 没错。2. 当前页面无响应，是否可以考虑使用跨页面的技术来支持呢？比如 worker？（啊我竟然说出来了）")])])])}),[],!1,null,null,null);a.default=r.exports}}]);